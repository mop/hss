[RssFeed {name = "Planet Arch Linux", url = "http://planet.archlinux.org/rss20.xml", items = [RssItem {title = "Andrew Roberts: Lovebox Weekender - Victoria Park, London", content = "<p>Had a fab day in glorious Mile End at the Lovebox Weekender festival. Highlight - apart from the company of my friends - was seeing The Flaming Lips live for the first time. Really spectacular is all I can say. You just have to be there to understand. Happened to take a few snaps whilst I was there. Here are a few of my faves&#8230;</p>\n<p><a title=\"Rainbow by arooaroo, on Flickr\" href=\"http://www.flickr.com/photos/andy_roberts_uk/2693515995/\"><img height=\"160\" width=\"240\" alt=\"Rainbow\" src=\"http://farm4.static.flickr.com/3142/2693515995_44e3e95d16_m.jpg\" /></a></p>\n<p><a title=\"Above the crowd by arooaroo, on Flickr\" href=\"http://www.flickr.com/photos/andy_roberts_uk/2694300288/\"><img height=\"240\" width=\"160\" alt=\"Above the crowd\" src=\"http://farm4.static.flickr.com/3158/2694300288_5bd702a385_m.jpg\" /></a></p>\n<p><a title=\"Balloon by arooaroo, on Flickr\" href=\"http://www.flickr.com/photos/andy_roberts_uk/2693492091/\"><img height=\"160\" width=\"240\" alt=\"Balloon\" src=\"http://farm4.static.flickr.com/3017/2693492091_d0fe5277a1_m.jpg\" /></a></p>\n<p><a title=\"How to make an entrance by arooaroo, on Flickr\" href=\"http://www.flickr.com/photos/andy_roberts_uk/2693519179/\"><img height=\"160\" width=\"240\" alt=\"How to make an entrance\" src=\"http://farm4.static.flickr.com/3242/2693519179_e20c10f67d_m.jpg\" /></a></p>\n<p>More available at in my <a href=\"http://flickr.com/photos/andy_roberts_uk/sets/72157606323029989/\">photo set</a> at Flickr. And if I stop being so lazy I&#8217;ll upload some more from that day too.\n</p>", homepage = "http://blog.andy-roberts.net/2008/08/08/lovebox-weekender-victoria-park-london/", isRead = True},RssItem {title = "Arch-live Development Blog: Archiso-live 20080807 (Second release)", content = "I started to look at the my custom build scripts of archiso again. I decide to start it up again since this will be more pure archlinux live cd and its faster.<br /><br />packages missing that are in arch-live:<br />kino<br />inkscape and deps<br />kompozer<br />e16 (e17cvs is in iso)<br />windowmaker<br />xfburn<br />xfmedia<br />gonvert<br />nonfree video-drivers<br />and others<br /><br />I have most arch-live packages in arch-live. The configs are the same has in arch-live I think. The major thing with archiso-live is you can use kernel modules from archlinux repo since it use arch kernel. :)<br /><br />You can get the iso <a href=\"http://arch-live.isawsome.net/iso/archiso/20080807/\">here</a>.<br /><br />root pass: ArchLinux<br /><br />user : arch<br />pass : arch<br /><br />PS There is no changes, load, or unload boot opitons.", homepage = "http://arch-live.blogspot.com/2008/08/archiso-live-20080807-second-release.html", isRead = True},RssItem {title = "Eduardo Romero: Recording your 3D Games Made Easy", content = "<p><em>Note: I featured this article in the Arch Linux Newsletter for July, 2008.</em></p>\n<p>From the <a href=\"http://nullkey.ath.cx/projects/glc\">glc website</a>: \226\128\156glc is an ALSA &amp; OpenGL capture tool for Linux. It consists of a generic video capture, playback and processing library and a set of tools built around that library. glc should be able to capture any application that uses ALSA for sound and OpenGL for drawing. It is still a relatively new project but already has a long list of features.\226\128\157</p>\n<p><a href=\"http://kensai.team88.org/node/14\" target=\"_blank\">read more</a></p>", homepage = "http://kensai.team88.org/node/14", isRead = True},RssItem {title = "Forum Annoucements: Pacman 3.2.0 release", content = "<p>You can read all about the new release <a href=\"http://www.archlinux.org/news/405/\">here</a>.<br /><br />This thread is for comments and other general talk about the newest pacman release. This is <strong>not</strong> a bug reporting venue. Inquiring here if other people have the same problem as you is fine, but know that your problem will not be fixed by complaining about it here. Please file a <a href=\"http://bugs.archlinux.org/\">proper bug report</a> under the 'Pacman' project.</p>-- posted by toofishes", homepage = "http://bbs.archlinux.org/viewtopic.php?id=53007", isRead = False},RssItem {title = "Forum Annoucements: netcfg v2.1.0 release candidate 1", content = "<p>This release is pretty much 2.1.0 unless I broke something badly. Barring any problems, I\226\128\153ll probably rename it and release it as 2.1.0 next week once I\226\128\153ve updated the documentation. Then I can start on 2.2.<br /><br />The changelog can be found on Gitweb - It\226\128\153s mostly bugfixes and some random quirks that some messed up drivers need.<br /><br />Probably the most boring release in ages :)<br /><br />James<br /><br />Documentation for development releases: <a href=\"http://wiki.archlinux.org/index.php/Network_Profiles_development\">http://wiki.archlinux.org/index.php/Net &hellip; evelopment</a><br />Gitweb: <a href=\"http://projects.archlinux.org/?p=netcfg.git;a=summary\">http://projects.archlinux.org/?p=netcfg.git;a=summary</a></p>-- posted by iphitus", homepage = "http://bbs.archlinux.org/viewtopic.php?id=52967", isRead = False},RssItem {title = "James Rayner: netcfg v2.1.0 RC1 - in [testing]", content = "<div class=\"snap_preview\"><br /><p>This release is pretty much 2.1.0 unless I broke something badly. Barring any problems, I&#8217;ll probably rename it and release it as 2.1.0 next week once I&#8217;ve updated the documentation. Then I can start on 2.2.</p>\n<p>The changelog can be <a href=\"http://projects.archlinux.org/?p=netcfg.git;a=log;h=refs/tags/2.1.0_RC1\">found on Gitweb</a> - It&#8217;s mostly bugfixes and some random quirks that some messed up drivers need.</p>\n<p>Probably the most boring release in ages <img src=\"http://s.wordpress.com/wp-includes/images/smilies/icon_smile.gif\" alt=\":)\" class=\"wp-smiley\" /> </p>\n<p>James</p>\n<img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/categories/iphitus.wordpress.com/37/\" /> <img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/tags/iphitus.wordpress.com/37/\" /> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/iphitus.wordpress.com/37/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/iphitus.wordpress.com/37/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/iphitus.wordpress.com/37/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/iphitus.wordpress.com/37/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/iphitus.wordpress.com/37/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/iphitus.wordpress.com/37/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/iphitus.wordpress.com/37/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/iphitus.wordpress.com/37/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/iphitus.wordpress.com/37/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/iphitus.wordpress.com/37/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=iphitus.wordpress.com&blog=13907&post=37&subd=iphitus&ref=&feed=1\" /></div>", homepage = "http://iphitus.wordpress.com/2008/08/06/netcfg-v210-rc1-in-testing/", isRead = False},RssItem {title = "Official News: Pacman 3.2.0 release", content = "Pacman 3.2.0 has been released to [core]. As usual, please report any issues or regressions to the bug tracker located at <a href=\"http://bugs.archlinux.org/\">http://bugs.archlinux.org/</a> after searching to see if your bug already exists.\n\nThe changes in this release are detailed in the NEWS file located in GIT, which can be accessed <a href=\"http://projects.archlinux.org/?p=pacman.git;a=blob;f=NEWS\">here</a>. Noticeable changes in this release include much-reduced memory usage and the dropping of pacman.static.\n\nThe following issues are known and will be fixed in the next maintenance release:\n<ol><li>Makepkg fails to download source URLs containing the '?' character. Fixed with <a href=\"http://projects.archlinux.org/?p=pacman.git;a=commit;h=9bc799ec7b1718e6d90ceedd5e08672068e26e10\">this commit</a>.</li>\n<li>Local mirror displays no progress bar or indications. Fixed with <a href=\"http://projects.archlinux.org/?p=pacman.git;a=commit;h=4476598e4e128f4595d5383ecb51a9576a447b5b\">this commit</a>.</li>\n<li>libdownload can fail when given an extra trailing slash. Fixed with <a href=\"http://projects.archlinux.org/?p=pacman.git;a=commit;h=72c5a298a3ee0f18019010ef2eb43da654ec25f8\">this commit</a>.</li>\n</ol>\n\nThanks again to all of the developers and contributors that have made this release possible!", homepage = "http://archlinux.org/news/405/", isRead = False},RssItem {title = "Official News: Eclipse 3.4", content = "Packages for eclipse 3.4-3 and eclipse-cdt 5.0.0-2 will appear shortly in extra.\n\nWe've switched to using the eclipse.org binary distributions for optimal stability and compatibility.\n\nIt appeared that installing the binary distributions in /opt/eclipse was required; however, we have since determined that everything works fine with eclipse in /usr/share.\n\nEclipse will stay in /usr/share.\n\nEnjoy!", homepage = "http://archlinux.org/news/404/", isRead = False},RssItem {title = "Forum Annoucements: Powered by 12 hamsters sticker wins Zazzle sticker of the day award", content = "<p>Congratulations to Branko for designing this sticker. Check out this link for 20% off and free shipping on this sticker:<br /><br /><a href=\"http://www.zazzle.com/pd/find/pt-217?CMPN=HBOTD_26_Winner\">http://www.zazzle.com/pd/find/pt-217?CM &hellip; _26_Winner</a></p>-- posted by Dusty", homepage = "http://bbs.archlinux.org/viewtopic.php?id=52925", isRead = False},RssItem {title = "Arch-live Development Blog: arch-fah (folding@home) 20080803 release", content = "I releasing a folding@home edition of arch-live. This is just the core folder of arch-live with some settings for folding@home to work.<br /><br />It uses arch user for folding@home for <code>security concerns.<br /><br />user: arch<br />pass: arch<br /><br />Root password is ArchLinux.<br /><br />You can get the iso <a href=\"http://arch-live.isawsome.net/iso/arch-fah/20080803/\">here</a>.<br /><br />PS I'm going to see about adding the folding@home editon has a boot option in arch-live. This release is only for people who don't need a desktop and like command line. Folding@home is started at boot so you shouldn't have to do anything but maybe login.<br /></code>", homepage = "http://arch-live.blogspot.com/2008/08/arch-fah-foldinghome-20080803-release.html", isRead = False},RssItem {title = "Judd Vinet: X-Canada: Salmon Arm", content = "<p>\nAfter many sad goodbyes (no wait, &quot;see you laters&quot;), we boarded what would be our last ferry ride for some time.&nbsp; It was a bit somber, but as we headed Northeast through the beautiful mountains of BC, our spirits started to lift a bit.\n</p>\n\n<p>\nAs usual, traffic sucked through the lower mainland, but once we got on to the Cache Creek route (hwy #1) it was all good.&nbsp; Lulu performed flawlessly, and though it was a bit rainy, we were treated to some nice sights.&nbsp; I do prefer that route instead of the Coquihalla, if you can afford the extra hour that it tacks on to the journey.\n</p>\n\n<p>\nSo Bec and I are now in Salmon Arm, staying with my parents.&nbsp; We're soaking up the sun and eating good steak while Finley roams the land, looking for fallen tidbits.&nbsp; Luckily for her, my Dad has a soft spot for whiny dogs, so she's getting her fill.\n</p>\n\n<p>\n<img src=\"http://www.zeroflux.org/blog/img/content/canada_trip_-_cache_creek.jpg\" alt=\"Views from Cache Creek\" width=\"640\" height=\"480\" />\n</p>\n\n<p>\nThis will be our last point of connectivity until we reach Calgary, which may be a quick respite before we start our trek across the prairies, so we're soaking up the home-cooked food and cold beer.&nbsp; Mom's loading us up with veggies from the garden, and Dad is buying me tools and showing me quirks that I should know about in an old vehicle like Lulu.&nbsp; Two more days until we head into the Kootenays. \n</p>\n\n<p>\nAnyway, to all our friends - we miss you dearly already.&nbsp; Stay in touch as we meander through the country at the insane speed of 90 km/h.&nbsp; ;) \n</p>\n\n<p>\n&nbsp;\n</p>\n\n<p>\n- Judd &amp; Bec \n</p>", homepage = "http://www.zeroflux.org/post/view?id=243", isRead = False},RssItem {title = "Forum Annoucements: Arch Linux Newsletter for August, 2008 Discussion", content = "<p><a href=\"http://www.archlinux.org/static/newsletters/newsletter-2008-Aug-04.html\">http://www.archlinux.org/static/newslet &hellip; ug-04.html</a><br /><br />As usual we discuss everything related to the Arch Linux Newsletter here, articles, contributions, and suggestions are welcome as well.<br /><br />Once again, thanks for your outstanding support,<br /><br />In the name of the Arch Linux Newsletter Team<br /><br />Eduardo &quot;kensai&quot; Romero</p>-- posted by kensai", homepage = "http://bbs.archlinux.org/viewtopic.php?id=52734", isRead = False},RssItem {title = "Official News: Newsletter for August, 2008", content = "The Arch Linux Newsletter team is proud to announce the <a href=\"http://www.archlinux.org/static/newsletters/newsletter-2008-Aug-04.html\">Newsletter for August, 2008</a>.\n\nTo discuss this newsletter, <a href=\"http://bbs.archlinux.org/viewtopic.php?id=52734\">click here</a>.\n\nTo read past issues of the Arch Linux Newsletter, <a href=\"http://www.archlinux.org/static/newsletters/\">here they are</a>.", homepage = "http://archlinux.org/news/403/", isRead = False},RssItem {title = "Arch-live Development Blog: Arch-live 20080731 release", content = "Changes since last release:<br />added a mini, CD, and full menu options now.<br /><ul><li>mini option is the normal desktop apps. If you took the arch-live/base/extra folder from the cd with isomaster you will have more reasonble ~530mb live cd.  This come with all the desktops but kde and afterstep.<br /></li></ul><ul><li>CD option is just the base folder modules. This is so when i make the dvd edition you can still see what the CD edition looks/feels like with out downloading the cd version. CD option is Default.<br /></li></ul><ul><li>The full option is so all modules in base and modules folders are load on boot.<br /></li></ul>The nonfree ati and nvidia drivers are moved from optional to modules folder now. This is why there is a CD and Full menu options now. NOTE: videoconfig script is bugy with my x200 IGP. This the main reason its being done this way.<br /><br />I added info.pl script to arch-live. info.pl is called archinfo.pl in arch-live cause its made for archlinux. :) The forum thread about this is <a href=\"http://bbs.archlinux.org/viewtopic.php?id=24208\">here</a>. Packages giblib and scrot are added cause of this script.<br /><br />I reverse aufs-slax to 20080527 so deactivate script will work again. Now you can remove modules again.<br /><br />/mnt/live/memory/images folder uses tmpfs now if xino folder needs tmpfs.<br /><br />I added slax2hd module from <a href=\"http://www.slax.org/modules.php?action=detail&id=157\">here</a>. Its a installer but its uses dialog in shell like slackware installer does. You will have login to root to use it. NOTE: USE AT OWN RISK.<br /><br />NOTE:<br />root password: ArchLinux<br /><br />user: arch<br />password: arch<br /><br />packages added:<br />giblib<br />scrot<br />xf86-video-vesa-2.0.0-2-i686 (my own package to fix some vbox problems)<br />lxde desktop<br />pacbuilder-svn<br /><br />You can get the iso <a href=\"http://arch-live.isawsome.net/iso/20080731/\">here</a>.", homepage = "http://arch-live.blogspot.com/2008/07/arch-live-20080731-release.html", isRead = False},RssItem {title = "Official News: On The Road to KDE 4.1", content = "On July 29th the KDE team will announce the final release of KDE 4.1, the\nfirst usable version of the fourth generation.\n\nTo make it possible for Arch users to join the release party in time, there\nare packages for 4.1 in our [testing] repository. Please take this chance to\ntest those and report any packaging bugs using the bug tracker.\n\nBefore you update you should read the following hints:\n\n* This update will NOT be smooth. Not all config files of the old KDE are\n compatible with 4.1. While the old are kept in ~/.kde the new ones are in\n /~.kde4. They won't be converted automagically. You could try to copy some\n files manually and see what happens. This might work for kmail, konqueror\n and others, but will break things for others. Maybe KDE will release a tool\n for doing this.\n\n* If you want to use the KDE desktop make sure you have kdebase-workspace\n installed, which includes the kdm, the taskbar etc.\n\n* if pacman wants to replace packages: Answer YES :-)\n\n* At the time of writing not all KDE-based packages have been rebuilt for use\n with new KDE or \"legacy libs\". If you cannot wait, installing kdelibs3\n should make them work. But this will be fixed in the repos before things are\n pushed to [extra] of course.\n\n* If you start KDM with inittab make sure to change its path from /opt/kde to\n /usr\n\n* Don't force the upgrade ( -f); report a bug instead\n\n* You might want to (re)move your ~/Desktop folder if you don't like that\n folder view\n\n* The first login takes a while; don't worry about this. It's creating new\n configs etc.\n\n* If you use an nvidia card, please read\n http://techbase.kde.org/User:Lemma/GPU-Performance\n\n* For a short overview about the new features read\n http://www.kde.org/announcements/4.1/", homepage = "http://archlinux.org/news/402/", isRead = False},RssItem {title = "Forum Annoucements: On the road to KDE 4.1", content = "<p>On July 29th the KDE team will announce the final release of KDE 4.1, the <br />first usable version of the fourth generation.<br /><br />To make it possible for Arch users to join the release party in time, there <br />are packages for 4.1 in our [testing] repository. Please take this chance to <br />test those and report any packaging bugs using the bug tracker.<br /><br />Before you update you should read the following hints:<br /><br />* This update will NOT be smooth. Not all config files of the old KDE are <br />&nbsp; compatible with 4.1. While the old are kept in ~/.kde the new ones are in<br />&nbsp; /~.kde4. They won't be converted automagically. You could try to copy some<br />&nbsp; files manually and see what happens. This might work for kmail, konqueror <br />&nbsp; and others, but will break things for others. Maybe KDE will release a tool<br />&nbsp; for doing this.<br /><br />* If you want to use the KDE desktop make sure you have kdebase-workspace<br />&nbsp; installed, which includes the kdm, the taskbar etc.<br /><br />* if pacman wants to replace packages: Answer YES :-)<br /><br />* At the time of writing not all KDE-based packages have been rebuilt for use<br />&nbsp; with new KDE or &quot;legacy libs&quot;. If you cannot wait, installing kdelibs3 <br />&nbsp; should make them work. But this will be fixed in the repos before things are<br />&nbsp; pushed to [extra] of course.<br /><br />* If you start KDM with inittab make sure to change its path from /opt/kde to <br />&nbsp; /usr<br /><br />* Don't force the upgrade ( -f); report a bug instead<br /><br />* You might want to (re)move your ~/Desktop folder if you don't like that<br />&nbsp; folder view<br /><br />* The first login takes a while; don't worry about this. It's creating new<br />&nbsp; configs etc. <br /><br />* If you use an nvidia card, please read<br />&nbsp; <a href=\"http://techbase.kde.org/User:Lemma/GPU-Performance\">http://techbase.kde.org/User:Lemma/GPU-Performance</a><br /><br />* For a short overview about the new features read<br />&nbsp; <a href=\"http://www.kde.org/announcements/4.1/\">http://www.kde.org/announcements/4.1/</a></p>-- posted by Pierre", homepage = "http://bbs.archlinux.org/viewtopic.php?id=52271", isRead = False},RssItem {title = "Forum Annoucements: Testers needed for new TeXLive packages!", content = "<p>I have prepared new packages of texlive in anticipation of the imminent release of TL 2008, which will coincide with the replacement of tetex by texlive in [extra]. Since TL is a big beast to package and test, I need your help!<br /><br />The packages are available for i686 and x86_64 in a temporary repository. Add this to pacman.conf<br /></p><div class=\"codebox\"><div class=\"incqbox\"><h4>Code:</h4><div class=\"scrollbox\"><pre>[texlive]\nServer = http://dev.archlinux.org/~francois/texlive/os/i686 #or x86_64</pre></div></div></div><p>And then please read <a href=\"http://wiki.archlinux.org/index.php/TeXLive_2008\">http://wiki.archlinux.org/index.php/TeXLive_2008</a> carefully.<br /><br />Thanks in advance,<br /><br />F</p>-- posted by Firmicus", homepage = "http://bbs.archlinux.org/viewtopic.php?id=52260", isRead = False},RssItem {title = "Arch-live Development Blog: Arch-live wiki", content = "i added a Arch-live wiki link to sided bar. :)<br /><a href=\"http://arch-live.wolf911.us/wiki/index.php?title=Main_Page\">http://arch-live.wolf911.us/wiki/index.php?title=Main_Page</a><br /><br />Here is just the mirror module repo.<br /><a href=\"http://arch-live.wolf911.us/\">http://arch-live.wolf911.us/</a><br /><br />Thanks goes to wolfden in the #sabayon channel for trying out my distro.", homepage = "http://arch-live.blogspot.com/2008/07/arch-live-wiki.html", isRead = False},RssItem {title = "Eli Janssen: debian ubuntu terminfo hijinks", content = "<p>At work I have been using a macbook pro lately. I have been having this weird \n   issue where when I ssh to a remote box, and fire up screen, backspace stops \n   working properly. I can change the terminal property in OS X to send <code>^H</code>, but\n   then things like telnet and nsupdate start to fail hard. No good!\n</p>\n<p>So today I decided to work on it. I after some googling, I decided to ask \n   <a href=\"http://phraktured.net\" title=\"phrakture - can lift a car over his head\">phrakture</a> for some of his terminfo mastery.\n</p>\n<ol>\n <li><p>I got the TERM variable from the OSX box, and the remote box (which was a \n   ubuntu gutsy install), and compared them. \n</p>\n<pre><code>$ echo $TERM\n xterm-color\n$ ssh remotebox\n$ echo $TERM\n xterm-color\n$ screen -R failwhale\n$ echo $TERM\n screen\n$ exit\n$ exit\n</code></pre><p>So far so good. I got <code>xterm-color</code> for local, remote, and <code>screen</code> inside\n   of remote screen.\n</p>\n\n </li>\n\n <li><p>I wanted to see what the terms thought I was sending them. So locally, and\n   remotely, and then remotely inside screen, I did a <code>C-v &lt;backspace&gt;</code>. \n   Locally and remotely I got <code>^?</code> for the backspace key. Remotely inside \n   screen I got <code>^[[3~</code>.\n</p>\n\n </li>\n\n <li><p>I checked my bash dotfiles to make sure I wasn't forcing any goofy things.\n   I wasn't. yay!\n</p>\n\n </li>\n\n <li><p>phrakture had me test on an ArchLinux box. I have a few running, so this \n   was no problem. The Arch box had no problem. Further, remotely in the Arch\n   box and inside screen, <code>C-v &lt;backspace&gt;</code> showed me <code>^?</code>. This was a <code>ding</code> \n   moment for me, as I hadn't before noticed that only debian based systems\n   presented this problem to me. It had never clicked until then. Not random!\n</p>\n\n </li>\n\n <li><p>Next step was to look at the terminfo data for xterm-color. I had\n   previously installed ncurses-term on ubuntu, so I had all the terminfos I\n   thought I needed. I copied the ArchLinux terminfo for xterm-color to the\n   ubuntu box, and put it in a home dir, so I could compare them easily with\n   infocmp.\n</p>\n<pre><code>$ mkdir ~/.terminfo/a/\n$ scp remote-arch:/usr/share/terminfo/x/xterm-color .terminfo/a/arch-xterm-color\n$ infocmp xterm-color arch-xterm-color\n  comparing xterm-color to arch-xterm-color.\n  comparing booleans.\n  comparing numbers.\n  comparing strings.\n    hts: NULL, '\\EH'.\n    kdch1: '\\177', '\\E[3~'.\n    kend: '\\E[4~', NULL.\n    kfnd: NULL, '\\E[1~'.\n    khome: '\\E[1~', NULL.\n    kslt: NULL, '\\E[4~'.\n</code></pre><p>Whoah. That doesn't seem right, and phrakture agreed. Note the <code>kdch1</code> \n   values. Phrakture informed me that <code>kdch1</code> is the backspace key.  \n</p>\n\n </li>\n\n <li><p>Some additional googlitued turned up this <a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=319554\" title=\"debian terminfo failboat\">bug report</a>.\n   Facepalms ensued. Thanks debian! :/\n</p>\n\n </li>\n</ol>\n<p>So how did I fix it?\n</p>\n<pre><code>$ mv .terminfo/a/arch-xterm-color /usr/share/terminfo/x/xterm-color\n</code></pre><p>Now everything works great! I was pleased to find that I do not have problems \n   ssh'ing from the ubuntu install that I changed this on, to other *nix boxen. I \n   was afraid there would be some reliance inside the debian core on those odd \n   terminfo values, but it didn't seem to hurt to remove them.\n</p>", homepage = "http://cactuswax.net/articles/debian-ubuntu-terminfo-hijinks/", isRead = False},RssItem {title = "Arch-live Development Blog: Arch-live 20080723 release", content = "Changes since 20080714:<br />kernel26slax updated to 2.6.26<br />madwifi-slax package added<br />gspcav1-slax package added<br />added xine-lib in xorg to make it possible to do a arch-live-mini (300MB?)<br /><a href=\"http://xfce-look.org/content/show.php/Archmousel?content=84188\">desktop artwork</a><br />slim theme is now archlinux-darch-white.<br /><br />Added packages:<br />crack-attack<br />dragonhunt<br />ltris<br />fceu<br />snes9x-gtk<br />gfceu<br />generator<br />simdock<br />xfmedia<br />vlc<br />audacity<br />mino<br />qalculate-gtk<br />emesene<br /><br />Removed packages:<br />there are no dep module of kdemod and kdemod4 anymore<br />I upload it <a href=\"http://arch-live.isawsome.net/modules/Extra/\">here</a>. Its name will be 11-libkdemod4.lzm.<br />Only kdemod4 will be supported for now on.<br /><br />You can get the iso <a href=\"http://arch-live.isawsome.net/iso/20080723/\">here</a>. I will also added a installer module to repo soon.<br /><br />PS This release took longer cause i was making kernel 2.6.26 work with my wifi. I found out that you can only have rtl8187 devices working with 11M data rate now with pid data rate in the kernel. code: iwconfig wlan0 rate 11M<br />NOTE: rtl8187 devices will not work with data rate set to auto or any other rate then 11M.", homepage = "http://arch-live.blogspot.com/2008/07/arch-live-20080723-release.html", isRead = False},RssItem {title = "Daniel Isenmann: I\226\128\153m not social anymore\226\128\166", content = "<p>Today I canceld my membership of studivz/meinvz. These are the biggest social networks in Germany (maybe in Europe). At the beginning there was a huge hype about those social networks, after several years they are totally boring to me. I still have my contacts and I manage them the traditional online way. Why should I send a message through those social networks, if I have the mail address or ICQ/Jabber/MSN/&#8230; account? Totally senseless to me.</p>\n<p>I will look for new great products out there on the web&#8230;social networks are definitly out for me.</p>", homepage = "http://ise.is.ohost.de/?p=52", isRead = False},RssItem {title = "Arch-live Development Blog: A Mirror for arch-live ISOs", content = "I know have a mirror for my arch-live isos. You can find it <a href=\"http://archlinux.us/iso/arch-live/\">here</a>. I have it also in my side bar called US Arch-live Mirror 1.<br /><br />You can thank crouse in the archlinux forum for the mirror.", homepage = "http://arch-live.blogspot.com/2008/07/mirror-for-arch-live-isos.html", isRead = False},RssItem {title = "Arch-live Development Blog: Arch-live 20080714 release", content = "Changes in this release:<br />Made a more stable modular system with my devel package.<br />Removed most of 02-apps module packages. I did this for saving space.<br />Using block size 128kb now instead of 64kb.<br /><br />Packages added:<br />zsnes<br />inkscape<br />utorrent<br />streamripper<br />streamturner<br />blender ?<br />hydrogen ?<br />lmms ?<br />scite<br /><br />packages from 02-apps added to 02-xorg:<br />abs<br />htop<br />time<br />whois<br />lsof<br />hwd<br />netkit-bsd-finger<br />parted<br />mc<br />lshwd<br />syslinux<br /><br />You can get the the iso <a href=\"http://arch-live.isawsome.net/iso/20080714/\">here</a>.<br /><br />There are some extra modules for java runtime, kdemod, and kdemod4. You can get them <a href=\"http://arch-live.isawsome.net/modules/Extra/\">here</a>.<br /><br />This iso will be fully updated at 4:00 EST.<br /><br />EDIT: I changed the background, splash, and slim theme to <a href=\"http://www.jkhp.it/OS-tan/desktops/JKHP_archlinux1024.jpg\">this</a>. I used the 1280pix version though.", homepage = "http://arch-live.blogspot.com/2008/07/arch-live-20080714-release.html", isRead = False},RssItem {title = "Leslie Polzer: Collecting ASDF system dependencies", content = "<p>Here&#8217;s a snippet that will recursively collect all dependencies of one or more ASDF systems:</p>\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"lisp\"><span>&#40;</span>asdf:<span>oos</span> 'asdf:<span>load</span><span>-</span>op 'asdf<span>&#41;</span>\n<span>&#40;</span>asdf:<span>oos</span> 'asdf:<span>load</span><span>-</span>op 'metatilities<span>&#41;</span>\n&nbsp;\n<span>&#40;</span><span>defun</span> direct<span>-</span>dependencies <span>&#40;</span>component<span>&#41;</span>\n  <span>&#40;</span><span>cdadr</span> <span>&#40;</span>asdf:<span>component</span><span>-</span>depends<span>-</span>on 'asdf:<span>load</span><span>-</span>op\n                                    <span>&#40;</span>asdf:<span>find</span><span>-</span>component <span>nil</span> component<span>&#41;</span><span>&#41;</span><span>&#41;</span><span>&#41;</span>\n&nbsp;\n<span>&#40;</span><span>defun</span> normalize<span>-</span>system<span>-</span>id <span>&#40;</span>id<span>&#41;</span>\n  <span>&#40;</span><span>intern</span> <span>&#40;</span>symbol<span>-</span><span>name</span> id<span>&#41;</span> <span>&quot;KEYWORD&quot;</span><span>&#41;</span><span>&#41;</span>\n&nbsp;\n<span>&#40;</span><span>defun</span> <span>%</span>effective<span>-</span>dependencies <span>&#40;</span>components<span>&#41;</span>\n  <span>&quot;Helper function.&quot;</span>\n  <span>&#40;</span>when components\n    <span>&#40;</span>remove<span>-</span>duplicates\n      <span>&#40;</span><span>append</span> components\n              <span>&#40;</span><span>%</span>effective<span>-</span>dependencies\n                <span>&#40;</span><span>mapcar</span> #'normalize<span>-</span>system<span>-</span>id\n                        <span>&#40;</span>remove<span>-</span><span>if</span> #'<span>null</span>\n                                   <span>&#40;</span>metatilities:<span>flatten</span>\n                                     <span>&#40;</span><span>mapcar</span> #'direct<span>-</span>dependencies\n                                             components<span>&#41;</span><span>&#41;</span><span>&#41;</span><span>&#41;</span><span>&#41;</span><span>&#41;</span>\n      :<span>test</span> #'<span>eq</span><span>&#41;</span><span>&#41;</span><span>&#41;</span>\n&nbsp;\n<span>&#40;</span><span>defun</span> effective<span>-</span>dependencies <span>&#40;</span>components<span>&#41;</span>\n  <span>&quot;Find all dependencies needed for the list of COMPONENTS\n(which may be an atom, too).&quot;</span>\n  <span>&#40;</span><span>let</span> <span>&#40;</span><span>&#40;</span>components <span>&#40;</span>metatilities:<span>ensure</span><span>-</span><span>list</span> components<span>&#41;</span><span>&#41;</span><span>&#41;</span>\n    <span>&#40;</span>set<span>-</span>difference <span>&#40;</span><span>%</span>effective<span>-</span>dependencies components<span>&#41;</span> components\n                    :<span>key</span> #'normalize<span>-</span>system<span>-</span>id<span>&#41;</span><span>&#41;</span><span>&#41;</span>\n&nbsp;\n<span>;; usage</span>\n<span>&#40;</span>effective<span>-</span>dependencies :<span>weblocks</span><span>&#41;</span>\n&nbsp;\n<span>&#40;</span>:<span>LW</span><span>-</span>COMPAT :<span>CLOSER</span><span>-</span>MOP :<span>MOPTILITIES</span> :<span>METATILITIES</span><span>-</span>BASE :<span>TRIVIAL</span><span>-</span>GRAY<span>-</span>STREAMS\n :<span>ASDF</span><span>-</span>SYSTEM<span>-</span>CONNECTIONS :<span>METABANG</span><span>-</span>DYNAMIC<span>-</span>CLASSES :<span>FLEXI</span><span>-</span>STREAMS :<span>CFFI</span>\n :<span>SB</span><span>-</span>GROVEL :<span>CL</span><span>-</span>CONTAINERS :<span>METABANG</span><span>-</span>BIND :<span>CHUNGA</span> :<span>CL</span><span>-</span>BASE64 :<span>CL</span><span>-</span>FAD :<span>CL</span><span>-</span>PPCRE\n :<span>CL</span><span>+</span>SSL :<span>MD5</span> :<span>RFC2388</span> :<span>SB</span><span>-</span>BSD<span>-</span>SOCKETS :<span>SB</span><span>-</span>POSIX :<span>URL</span><span>-</span>REWRITE :<span>PARENSCRIPT</span>\n :<span>FARE</span><span>-</span>UTILS :<span>METATILITIES</span> :<span>HUNCHENTOOT</span> :<span>CL</span><span>-</span>WHO :<span>CL</span><span>-</span>JSON :<span>PURI</span> :<span>FARE</span><span>-</span>MATCHER\n :<span>CL</span><span>-</span>CONT :<span>ITERATE</span><span>&#41;</span></pre></div></div>", homepage = "http://blog.viridian-project.de/2008/07/13/collecting-asdf-system-dependencies/", isRead = False},RssItem {title = "Leslie Polzer: Lightning link checker", content = "<p>Wow!</p>\n<blockquote><p>\n    urlcheck is lightweight, concurrent url checker. It uses minimal resources, and is multicore-capable.</p>\n<p>    In contrast to popular link checkers, it uses few resources, will readily take advantage of multiple cores, and is easily killable.\n</p></blockquote>\n<p>Works great and is fast as lightning. Plus, it&#8217;s written in Haskell.</p>\n<p>Arch Linux users <a href=\"http://aur.archlinux.org/packages.php?ID=17702\">get it from AUR</a>, all others from their distribution or directly <a href=\"http://hackage.haskell.org/cgi-bin/hackage-scripts/package/urlcheck\">from source</a>.</p>", homepage = "http://blog.viridian-project.de/2008/07/13/lightning-link-checker/", isRead = False},RssItem {title = "Gianvito Morena: Gtk Engines Benchmarks - Whats the fastest?", content = "<div class=\"snap_preview\"><br /><p>There is a program that benchs every kind of gtk engine&#8230;</p>\n<p>The name is <strong>GTKPERF.</strong></p>\n<p>Have you ever asked: &#8220;What&#8217;s the fastest gtk engine?&#8221; (in everyday actions&#8230;)</p>\n<p>I used <strong>gtkperf</strong> to bench some of the most famous gtk engines:</p>\n<ul>\n<li>Clearlooks (from gnome-themes-svn)\n<li>Nodoka\n<li>Human (from Ubuntu)\n<li>Murrine (thanks to CIMI (like new Clearlooks) :))\n<li>Aurora\n<li>Mac4Lin\n<li>Clearlooks Classic\n<li>Crux\n<li>Glossy\n<li>Glider\n<li>Mist\n<li>Nova\n<li>Simple\n<li>ThinIce\n<li>Rezlooks (gilouche)\n<li>Industrial\n<li>Experience\n<li>QtCurve\n<li><strong>Bluecurve</strong>\n<li><strong>Mythbuntu</strong></li>\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>Updated with xfce-gtk-engines</p>\n<p><span id=\"more-41\"></span>\n</p>\n<ul>\n<li>Xfce\n<li>Xfce-4.0\n<li>Xfce-4.2\n<li>Xfce-b5\n<li>Xfce-basic\n<li>Xfce-cadmium\n<li>Xfce-curve\n<li>Xfce-dawn\n<li>Xfce-dusk\n<li>Xfce-kde2\n<li>Xfce-kolors\n<li>Xfce-light\n<li>Xfce-orange\n<li>Xfce-redmondxp\n<li>Xfce-saltlake\n<li>Xfce-smooth\n<li>Xfce-stellar\n<li>Xfce-winter </li>\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>My Pc:</p>\n<ul>\n<li>Athlon64 3000+ @ 2300 Mhz\n<li>1 Gb RAM\n<li>Nvidia 7600GT (169.09)\n<li>ArchLinux with kernel: 2.6.24-zen3 </li>\n</li></li></li></ul>\n<div><em>(See Pages numbers on the right to change pages)</em></div>\n<div>\n<img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/categories/gianvito.wordpress.com/41/\" /> <img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/tags/gianvito.wordpress.com/41/\" /> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/gianvito.wordpress.com/41/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/gianvito.wordpress.com/41/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/gianvito.wordpress.com/41/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/gianvito.wordpress.com/41/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/gianvito.wordpress.com/41/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/gianvito.wordpress.com/41/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/gianvito.wordpress.com/41/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/gianvito.wordpress.com/41/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/gianvito.wordpress.com/41/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/gianvito.wordpress.com/41/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=gianvito.wordpress.com&blog=2900638&post=41&subd=gianvito&ref=&feed=1\" /></div></div>", homepage = "http://gianvito.wordpress.com/2008/02/20/gtk-engines-benchmarks-whats-the-fastest/", isRead = False}]},RssFeed {name = "Planet Haskell", url = "http://planet.haskell.org/rss20.xml", items = [RssItem {title = "Joachim Breitner: Xmonad on my mobile phone", content = "<p>Here at <a href=\"http://debconf8.debconf.org/\">DebConf 8</a> in Argentinia, I\226\128\153m working on getting Debian to work on the <a href=\"http://wiki.openmoko.org/wiki/Freerunner\">OpenMoko Freerunner Smartphone</a>. We are progressing quite nicely, soon having the same features as the official freesmartphone.org image. See the <a href=\"http://wiki.debian.org/pkg-fso\">pkg-fso wiki page</a> for more on that.</p><p> And why do we want to do that? Because we can use everything in the Debian archive on our phones!</p><div align=\"center\"><img height=\"640\" width=\"480\" src=\"http://www.joachim-breitner.de/various/xmonad-on-freerunner.png\" /></div><p>This is the <a href=\"http://xmonad.org/\">xmonad</a> window manager, programmed in Haskell and usually running on my Desktop, now on my mobile phone! And it\226\128\153s almost usable. Only problem is that the screen keyboard, metacity-keyboard, gets the focus by xmonad, so I can\226\128\153t actually type into other windows. This could be fixed by configuring xmonad, but for that, I need to install ghc and I do not have these 280MB left on my SD card...</p>", homepage = "https://www.joachim-breitner.de/blog/archives/300-Xmonad-on-my-mobile-phone.html", isRead = True},RssItem {title = "Luke Palmer: Braid!", content = "<p>I just had my mind blown by the <i>trial</i> of Braid, by Jonathan Blow, which just came out on XBox Live Arcade.  This is the most interesting puzzle game I have played in many years.  It&#8217;s a platformer about playing with <i>time</i>, and in incorporates this very effectively to allow clever solutions to puzzles which seem impossible.  Not very many games get my money these days, but this one does!</p>\n<p>Bravo!</p>", homepage = "http://luqui.org/blog/archives/2008/08/09/braid/", isRead = True},RssItem {title = "Luke Palmer: Composable Input for Fruit", content = "<p>The other day I had an idea for a game which required a traditionalish user interface  (text boxes, a grid of checkboxes, &#8230;).  But I&#8217;m addicted to Haskell at the moment, so I was not okay with doing it in C#, my usual GUI fallback.  Upon scouring hackage for a GUI widget library I could use, I realized that they all suck&mdash;either they are too imperative or too inflexible.</p>\n<p>So I set out to write <i>yet another</i> one, in hopes that it wouldn&#8217;t suck.  The plan is to write it on top of <a href=\"http://hackage.haskell.org/cgi-bin/hackage-scripts/package/graphics-drawingcombinators\">graphics-drawingcombinators</a>, my lightweight declarative OpenGL wrapper, and <a href=\"http://code.haskell.org/reactive/\">reactive</a>, the latest (in progress) implementation of FRP.  In researching the design, Conal pointed me to <a href=\"http://www.apocalypse.org/pub/u/antony/work/pubs/genuinely-functional-guis.pdf\">a paper on &#8220;Fruit&#8221;</a>, which is a very simple design for GUIs in FRP.  It&#8217;s nice (because it is little more than FRP itself), and it&#8217;s approximately what I&#8217;m going to do.  But before I do, I had to address a big grotesque wart in the design:</p>\n<pre>\ndata Mouse = Mouse { mpos :: Point,\n                     lbDown :: Bool,\n                     rbDown :: Bool }\ndata Kbd = Kbd { keyDown :: [Char] }\ntype GUIInput = (Maybe Kbd, Maybe Mouse)\ntype GUI a b = SF (GUIInput,a) (Picture,b)\n</pre>\n<p>So every GUI transformer takes a GUIInput as a parameter.  The first thing that caught my eye was the Maybes in the type of GUIInput, which are meant to encode the idea of focus.  This is an example of the inflexibility I noticed in the existing libraries: it is a very limited, not extensible, not customizable idea of focus.  But there is something yet more pressing: this input type is not composable.  The type of input is always the same, and there is no way to build complex input handling from simple input handling.</p>\n<p>I took a walk, and came up with the following:</p>\n<p>Scrap GUI.  Our interface will be nothing more than pure FRP.  But that doesn&#8217;t solve the input problem, it just gives it to the users to solve.  So to solve that, we build up composable input types, and then access them using normal FRP methods.</p>\n<p>We will start with Kbd and Mouse as above.  The problem to solve is that when we pass input to a subwidget, its local coordinate system needs to be transformed.  So the only cabability input types need to have is that they need to be transformable.</p>\n<pre>\n-- A class for invertable transformations.  We restrict to affine transformations\n-- because we have to work with OpenGL, which does not support arbitrary\n-- transformation.\nclass Transformable a where\n    translate :: Point -&gt; a -&gt; a\n    rotate    :: Double -&gt; a -&gt; a\n    scale     :: Double -&gt; Double -&gt; a -&gt; a\n\ninstance Transformable Point where\n    -- .. typical affine transformations on points\n\n-- Keyboard input does not transform at all\ninstance Transformable Kbd where\n    translate _ = id\n    rotate _ = id\n    scale _ _ = id\n\n-- The mouse position transforms\ninstance Transformable Mouse where\n    translate p m  = m { mpos = translate p (mpos m) }\n    rotate theta m = m { mpos = rotate r (mpos m) }\n    scale sx sy m  = m { mpos = scale sx sy (mpos m) }\n\n-- Behaviors transform pointwise.  In fact, this is the instance\n-- for Transformable on any Functor, but we have no way of telling\n-- Haskell that.\ninstance (Transformable a) =&gt; Transformable (Behavior a) where\n    translate = fmap . translate\n    rotate = fmap . rotate\n    scale sx sy = fmap (scale sx sy)\n</pre>\n<p>Widgets that accept input will have types like: <tt>Behavior i -&gt; Behavior o</tt> where both i and o are transformable (o is usually a Drawing, or a Drawing paired with some other output).  So we can transform a whole widget at once by defining a transformable instance for functions.</p>\n<pre>\ninstance (Transformable i, Transformable o) =&gt; Transformable (i -&gt; o) where\n    translate p f = translate p . f . translate (-p)\n    rotate r f = rotate r . f . rotate (-r)\n    scale sx sy = scale sx sy . f . scale (recip sx) (recip sy)\n</pre>\n<p>The way we transform a function is to inversely transform the input, do the function, then transform the output.  This is called the <a href=\"http://en.wikipedia.org/wiki/Conjugation_of_isometries_in_Euclidean_space\">conjugate</a> of the transformation.</p>\n<p>And that&#8217;s it for composable input: just a class for affine transformations.  A typical GUI might look like:</p>\n<pre>\n-- Takes a mouse position, returns the \"pressed\" state and its picture.\nbutton :: Behavior Mouse -&gt; Behavior (Bool,Drawing)\n</pre>\n<p>And if we want two buttons:</p>\n<pre>\ntwoButtons = (liftA2.liftA2) (second over) button (translate (1,0) button)\n</pre>\n<p>That is, just transform each subGUI as a whole (rather than separating input and output) and combine appropriately.  That&#8217;s the theory, at least.  For this to actualy work correctly, we would need one of the following:</p>\n<pre>\ninstance Transformable b =&gt; Transformable (a,b)\ninstance Transformable Bool    -- do nothing\n</pre>\n<p>Neither of these rubs me the right way.  That seems like the wrong instance of transformable (a,b) to me (however, (a,) <i>is</i> a functor, so it&#8217;s consistent with what I said earlier).  I don&#8217;t like having transformable instances for things that don&#8217;t actually transform.  I&#8217;m thinking about maybe a type like this:</p>\n<pre>\nnewtype WithDrawing a = WithDrawing (a,Drawing)\ninstance Transformable (WithDrawing a)\n</pre>\n<p>(Or the appropriate WithTransformable generalization)</p>\n<p>Thoughts?</p>", homepage = "http://luqui.org/blog/archives/2008/08/09/composable-input-for-fruit/", isRead = True},RssItem {title = "Magnus Therning: TagSoup, meet Parsec!", content = "<p>Recently I began writing a tool to scrape some information off a web site for some off-line processing.  After writing up the basics using <a href=\"http://www-users.cs.york.ac.uk/~ndm/tagsoup/\">TagSoup</a> I showed what I had to a colleague.  His first comment was \226\128\156Can&#8217;t you use Parsec for that?\226\128\157  It took me a second to realise that he didn&#8217;t mean that I should write my own XML parser but rather that Parsec allows writing parsers of a list of anything.  So I thought I&#8217;d see just what it&#8217;d take to create a parser for <code>[Tag]</code>.</p>\n\n<p>A look at the string parser shipped with Parsec offered a lot of inspiration.</p>\n\n<p>First the basic type, <code>TagParser</code>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\"><span>type</span> TagParser <span>=</span> GenParser Tag</pre></div></div>\n\n\n<p>The basic function of Parsec is <code>tokenPrim</code>, basically that&#8217;s what other basic parsers use.  Taking a cue from the string parser implementation I defined a function called <code>satisfy</code>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">satisfy f <span>=</span> tokenPrim\n        <span>show</span>\n        <span>&#40;</span>\\ pos t <span>_</span> <span>-&gt;</span> updatePosTag pos t<span>&#41;</span>\n        <span>&#40;</span>\\ t <span>-&gt;</span> <span>if</span> <span>&#40;</span>f t<span>&#41;</span> <span>then</span> Just t <span>else</span> Nothing<span>&#41;</span></pre></div></div>\n\n\n<p>The positioning in a list of tags simply an increase of column, irrespective of what tag is processed:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">updatePosTag s <span>_</span> <span>=</span> incSourceColumn s <span>1</span></pre></div></div>\n\n\n<p>Now I have enough to create the first <code>Tag</code> parser&#8212;one that accepts a single instance of the specified kind:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">tag t <span>=</span> satisfy <span>&#40;</span><span>~==</span> t<span>&#41;</span> <span>&lt;?&gt;</span> <span>show</span> t</pre></div></div>\n\n\n<p>It&#8217;s important to stick the supplied tag on the right of <code>(~==)</code>.  See <a href=\"http://hackage.haskell.org/packages/archive/tagsoup/0.6/doc/html/Text-HTML-TagSoup.html#v%3A~%3D%3D\">its documentation</a> for why that is.  The second parser is one that accepts any kind of tag:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">anyTag <span>=</span> satisfy <span>&#40;</span><span>const</span> True<span>&#41;</span></pre></div></div>\n\n\n<p>So far so good.  The next parser to implement is one that accepts any kind of tag out of a list of tags.  Here I want to make use of the convenient behaviour of <code>(~==)</code> so I&#8217;ll need to implement a custom version of <code>elem</code>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">l `elemTag` r <span>=</span> <span>or</span> <span>$</span> l `elemT` r\n    <span>where</span>\n        l `elemT` <span>&#91;</span><span>&#93;</span> <span>=</span> <span>&#91;</span>False<span>&#93;</span>\n        l `elemT` <span>&#40;</span>r:rs<span>&#41;</span> <span>=</span> <span>&#40;</span>l <span>~==</span> r<span>&#41;</span> : l `elemT` rs</pre></div></div>\n\n\n<p>With that in place it&#8217;s easy to implement <code>oneOf</code> and <code>noneOf</code>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">oneOf ts <span>=</span> satisfy <span>&#40;</span>`elemTag` ts<span>&#41;</span>\nnoneOf ts <span>=</span> satisfy <span>&#40;</span>\\ t <span>-&gt;</span> <span>not</span> <span>&#40;</span>t `elemTag` ts<span>&#41;</span><span>&#41;</span></pre></div></div>\n\n\n<p>So, as an example of what this can be used for here is a re-implementation of TagSoup&#8217;s <a href=\"http://hackage.haskell.org/packages/archive/tagsoup/0.6/doc/html/Text-HTML-TagSoup.html#v%3Apartitions\">partitions</a>:</p>\n\n\n<div class=\"wp_syntax\"><div class=\"code\"><pre class=\"haskell\">partitions t <span>=</span> liftM2 <span>&#40;</span>:<span>&#41;</span>\n        <span>&#40;</span>many <span>$</span> noneOf <span>&#91;</span>t<span>&#93;</span><span>&#41;</span>\n        <span>&#40;</span>many <span>$</span> liftM2 <span>&#40;</span>:<span>&#41;</span> <span>&#40;</span>tag t<span>&#41;</span> <span>&#40;</span>many <span>$</span> noneOf <span>&#91;</span>t<span>&#93;</span><span>&#41;</span><span>&#41;</span></pre></div></div>\n\n\n<p>Of course the big question is whether I&#8217;ll rewrite my original code using Parsec.  Hmm, probably not in this case, but the next time I need to do some web page scraping it offers yet another option for doing it.</p>", homepage = "http://therning.org/magnus/archives/367?&owa_from=feed&owa_sid=", isRead = True},RssItem {title = "Magnus Therning: Burning audio CDs on Linux", content = "<p>I just had a blast from the past!</p>\n\n<p>Being somewhat spoiled by the current state of Linux-on-the-desktop (Gnome in my case) I have become used to inserting a blank CD, point Nautilus to <code>burn:///</code>, dragging and dropping a few files into it, and finally clicking the &#8220;Burn to CD&#8221; button.  Works beautifully.  Of course I thought that Nautilus&#8217; CD-burning would know about audio CDs.  So I dragged a few WAV files into Nautilus and clicked the button.  Voil\195\160, a data CD containing a few Wav files!  Not really what I wanted.</p>\n\n<p>So, to avoid this in the future here is the command line to use:</p>\n\n<pre><code>wodim -v dev=0,0,0 speed=40 -audio -pad *.wav\n</code></pre>", homepage = "http://therning.org/magnus/archives/363?&owa_from=feed&owa_sid=", isRead = True},RssItem {title = "John Goerzen (CosmicRay): Weird Firefox Problem", content = "Once again, I find myself turning to this wonderful series of tubes for help on a weird problem.<br />\n<br />\nI have Firefox (Iceweasel) on all the computers I regularly use.  One of these computers has had a persistent problem.<br />\n<br />\nAfter using it for awhile, it takes a really long time to look up hostnames in DNS.  And after upgrading to Firefox 3, it got much worse.  Not only did name resolution get slow, but sometimes page loads would get exceptionally slow as well.  I could have 5 tabs open, and all of a sudden at the magic moment, nothing would load on any tab.  It was as if I was being hit by 75% packet loss.  And new pages wouldn't load, either.  <br />\n<br />\ntcpdump showed Firefox not even sending out packets at these times.  After a few minutes, it might be back to normal.  But I could always quit and restart and it would be fine.<br />\n<br />\nNow, here's the weird thing: I've eliminated every possible difference I can think of between this one machine and the others I use Firefox on.  My plugins and extensions are the same set with the same versions.  My configuration is the same.  When this problem is happening, other network-related programs (even other web browsers) on the same machine are working fine.  Nobody else here seems to be having this problem.<br />\n<br />\nAny ideas?", homepage = "http://changelog.complete.org/posts/738-Weird-Firefox-Problem.html", isRead = True},RssItem {title = "Joachim Breitner: pam-dbus: authentication by bubbles", content = "<p>Imagine you have a device, such as a linux phone, that allows login via ssh, e.g. when on a wireless network. You don\226\128\153t want to set a password with the (limited) phone UI. On the other hand, you don\226\128\153t want to allow passwordless root logins into your phone. But you do want the ability to login via ssh, after all that\226\128\153s why you have bought a linux smartphone. This led me to the idea of a pam module and corresponding UI piece that asks the currently logged in user: \226\128\158Hey, someone tries to login. Is that ok or not?\226\128\156 This might also be useful for guest accounts on regular laptops. For more on that, see <a href=\"https://www.joachim-breitner.de/blog/archives/298-Flow-control-with-pam-configuration.html\">my last blog post</a>.</p><p>So I hacked it together (actually twice, due to some unfortunate use of <tt>rm</tt> at some point), invested most of the time in learning more about the python garbage collector vs. callbacks, explicitly marked global variables and proper automake stuff. In the end I got, well, just what I wanted. A simple pam module, dubbed <tt>pam-dbus</tt> that sends a request via the dbus system bus and an autostart program (written in python for now, but I might re-implement it in C) that uses notification-daemon to get confirmation from the user.</p><p>You are welcome to try the <a href=\"http://people.debian.org/~nomeata/pam-dbus/\">sources and binary debian packages</a> or have a look at the darcs repository for <a href=\"http://darcs.nomeata.de/pam-dbus.upstream/\">pam-dbus</a> (with<a href=\"http://darcs.nomeata.de/pam-dbus/\"> debian/ directory</a>, <a href=\"http://darcs.nomeata.de/cgi-bin/darcsweb.cgi\">repository browser</a>). This will end up in Debian later, I guess.</p><p><strong>Update:</strong> Erik Johansson pointed out that if you want to use this with ssh, you need to set <tt>UsePAM yes</tt> in <tt>/etc/ssh/ssd_config</tt>.</p>", homepage = "https://www.joachim-breitner.de/blog/archives/299-pam-dbus-authentication-by-bubbles.html", isRead = True},RssItem {title = "Joachim Breitner: Flow control with pam configuration", content = "<p>Usually, files in <tt>/etc/pam.d/</tt> are simple, linear descriptions of how a user should be authenticated, e.g. \226\128\158Try to authenticate him against ldap, and then against the local data base\226\128\156. But sometimes, you want something more advanced, for example \226\128\158If the user is called guest, please authenticate him with <tt>pam_dbus</tt>, otherwise use regular <tt>pam_unix</tt>.\226\128\156 This is possible, and here I\226\128\153ll note down how to do that.</p><p>There are actually two problems to solve: How to detect the username, and then how to do the flow control.</p><p>For the first problem, I recently discovered the <a href=\"http://linux.die.net/man/8/pam_succeed_if\"><tt>pam_succeed_if</tt></a> module, that allows for relatively advanced logic for checking uids, usernames, hostnames and group membership. For our case, the line would read</p><pre>auth ? pam_succeed_if.so quiet user = guest</pre><p>Now what next? If we just wanted to allow unrestricted access to guest, we could put \226\128\158sufficient\226\128\156 for the questionmark. But we need something like <tt>if..then..else</tt>. Unfortunately (and I hope this will be fixed eventually), the only flow control available is \226\128\158skip the next n lines\226\128\156. So we can skip to <tt>pam_unix</tt> when this module fails (i.e. the user was someone else but guest), and if we did not skip, we can run the guest-specific module and then skip over <tt>pam_unix</tt>. So here is the complete snippet:</p><pre>auth [default=2 success=ignore] pam_succeed_if.so quiet user = guest<br />auth [success=ok new_authtok_reqd=done ignore=ignore default=die] pam_dbus.so<br />auth [default=1] pam_permit.so<br />auth required pam_unix.so</pre><p>You can read more about this advanced configuration in the <a href=\"http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/sag-configuration-file.html\">PAM Administration guide</a>. And here is the corresponding configuration for gdm, where guest can always login:</p><pre>auth [default=2 success=ignore] pam_succeed_if.so quiet user = guest<br />auth required pam_permit.so<br />auth [default=1] pam_permit.so<br />auth required pam_unix.so</pre><p>So I have a guest account with a locked password and I can allow ssh logins with a mouse click and use it directly with gdm. I probably should put the gdm configuration also in xscreensaver to not lock me out.</p>", homepage = "https://www.joachim-breitner.de/blog/archives/298-Flow-control-with-pam-configuration.html", isRead = True},RssItem {title = "Thomas M. DuBuisson: hsXenCtrl and pureMD5", content = "<div class=\"snap_preview\"><br /><p>On vacation I found some time to upload the new hsXenCtrl library (0.0.7) and pureMD5 (0.2.4)</p>\n<p>The new hsXenCtrl includes the System.Xen module, which is a WriterT ErrorT transformer stack and a brief attempt at &#8216;Haskellifying&#8217; the xen control library.\194\160 I find it much more useful for simple tasks like pausing, unpasing, creating and destroying domains.\194\160 The API is still subject to change without notice as plenty of function are still very &#8216;C&#8217; like (ex: scheduler / sedf functions).</p>\n<p>pureMD5 received a much smaller change - some users noticed the -fvia-c caused compilation headaches on OS X.\194\160 After removing the offending flag, some benchmarks revealed no measureable difference in speed, so this is an over-due change. OS X users rejoice!</p>\n<img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/categories/tommd.wordpress.com/22/\" /> <img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/tags/tommd.wordpress.com/22/\" /> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/tommd.wordpress.com/22/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/tommd.wordpress.com/22/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/tommd.wordpress.com/22/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/tommd.wordpress.com/22/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/tommd.wordpress.com/22/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/tommd.wordpress.com/22/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/tommd.wordpress.com/22/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/tommd.wordpress.com/22/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/tommd.wordpress.com/22/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/tommd.wordpress.com/22/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=tommd.wordpress.com&amp;blog=3236650&amp;post=22&amp;subd=tommd&amp;ref=&amp;feed=1\" /></div>", homepage = "http://tommd.wordpress.com/2008/08/07/hsxenctrl-and-puremd5/", isRead = True},RssItem {title = "Bryan O'Sullivan: Sorely disappointed by the revamped delicious", content = "<p>In April last year, I visited Yahoo HQ to take a look at what was then their in-progress redesign of del.icio.us. It took me no more than a few minutes to decide that I hated it: it fit much less information on each page, it introduced big bars of colour to no apparent purpose, and little meaningless bits of text would flicker in and out of existence as I moved the mouse around.</p>\n<p>15 months has passed, and now that crummy redesign is the new face of the site. I don&#8217;t seem to be alone in my dislike for it: the support pages are full of complaints, and <a href=\"http://www.alexa.com/data/details/traffic_details/delicious.com\">its Alexa stats</a> look like the site fell off the edge of a cliff. During the upgrade, they even broke their Firefox plugin, so I can&#8217;t bookmark anything at the moment.</p>\n<p>It&#8217;s become clear over the past few years that social bookmarking was never going to grow beyond a tiny niche, but with the amount of time they&#8217;ve wasted on a redesign that nobody seems to like, I wonder if delicious hasn&#8217;t essentially killed the idea altogether.</p>", homepage = "http://www.serpentine.com/blog/2008/08/06/sorely-disappointed-by-the-revamped-delicious/", isRead = True},RssItem {title = "Bryan O'Sullivan: What to expect from the new binutils linker", content = "<p>I&#8217;ve been following Ian Lance Taylor&#8217;s updates on the status of gold, the new binutils linker, for a while, so when he announced that he&#8217;d <a href=\"http://www.airs.com/blog/archives/164\">added it to the binutils tree</a>, I decided to make a little time to try it out.</p>\n<p>I have a fairly large C++ application handy, so I tried linking it on my dual core Thinkpad with 2GB of memory, running Fedora 8.</p>\n<p>When I compile this application with debugging symbols enabled, it&#8217;s not exactly fast to link: it takes about a minute. Because the amount of data the linker has to chew through is impressively large, the actual time varies by up to 20% from one run to the next: all of those object files don&#8217;t fit into memory at once. This also has the unpleasant effect of paging out parts of apps I&#8217;m trying to use, such as Emacs and Firefox. Hmph.</p>\n<p>In this situation, gold does indeed improve linking performance, bringing the linking time down to about 40 seconds. The poor laptop&#8217;s disk still spends a lot of this time grinding away due to the sheer volume of data, so once again the number isn&#8217;t very repeatable.</p>\n<p>To eliminate the effect of memory pressure, I used &#8220;strip -g&#8221; to drop the debug information from the main app&#8217;s object files. (The libraries it links against still contain debug info, but they&#8217;re much smaller than the app itself.)</p>\n<p>Stripping the object files speeds up the regular binutils linker by a factor of four, reducing linking time to 14 seconds. The laptop&#8217;s disk is no longer being touched. I can still edit text files after a link without big initial stutters. Whew!</p>\n<p>When I switched to using gold as the linker, I was at first a little surprised to find that it actually works at all. This isn&#8217;t especially common for a complicated program that&#8217;s just been committed to a source tree. Better yet, it&#8217;s as fast as Ian claims: my app now links in 2.6 seconds, almost 5.4 times faster than with the old binutils linker!</p>\n<p>When I ran &#8220;ld &#8211;help&#8221;, I noticed the tantalising options &#8220;&#8211;threads&#8221; and &#8220;&#8211;thread-count&#8221;, so I tried those. It turns out that thread support is not enabled by default: I reconfigured, rebuilt, and tried again. Running with &#8220;&#8211;thread-count 2&#8243;, the linking time drops slightly, to 2.3 seconds: that&#8217;s nearly 6.1 times faster than before.</p>\n<p>Does the application actually <em>work</em> when linked by gold? Yes, so far with no signs of problems. It&#8217;s about 3% larger than the version produced by the old linker. I haven&#8217;t looked into why this might be.</p>\n<p>Is gold ready for prime time? It&#8217;s not too far off. It doesn&#8217;t support the &#8211;build-id flag, which my copy of gcc 4.3 is convinced it wants (perhaps because I&#8217;m running Fedora). It doesn&#8217;t link the Linux kernel properly, because the kernel tortures the linker in twisted and innovative ways. Also, I have run into a few non-reproducible crashes when running in threaded mode, such as the following:</p>\n<pre>\ninternal error in find_runnable_or_wait, at ../../gold/workqueue.cc:262\n</pre>\n<p>Overall, though, I&#8217;m very impressed, and I&#8217;m looking forward to the point where gold entirely supplants the existing binutils linker. I expect that won&#8217;t take too long, once Mozilla and KDE developers find out about the performance boost. Great work, Ian!</p>", homepage = "http://www.serpentine.com/blog/2008/03/24/what-to-expect-from-the-new-binutils-linker/", isRead = True},RssItem {title = "\"Alpheccar\": Haskell, iPhone and Biotech", content = "<p>I have been so busy on so many topics that I have not been able to update this blog for a while. In addition to my job, I have had some fun with Haskell, iPhone and biotechnology.\n\n</p> <p><a href=\"http://www.alpheccar.org/en/posts/show/92\">Read More...</a></p>", homepage = "http://www.alpheccar.org/en/posts/show/92", isRead = True},RssItem {title = "Haskell Weekly News: Haskell Weekly News: August 6, 2008", content = "Haskell Weekly News: August 06, 2008\n<p>Welcome to issue 80 of HWN, a newsletter covering\n   developments in the <a href=\"http://haskell.org/\">Haskell</a> community.</p>\n<h4>Community News</h4> <p>Brent Yorgey (byorgey, your friendly\nneighborhood HWN editor) has completed a move to Philadelphia and looks\nforward to starting a PhD in the programming languages group at U Penn next\nmonth.</p> <p>Roman Cheplyaka (Feuerbach) won second prize at the 2008 <a href=\"http://imc-math.org/\">International Mathematics Competition</a>!</p>\n<h4>Announcements</h4> <p><em>prof2dot, version 0.4.1</em>. Gregory Wright\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.glasgow.user/14821\">announced</a>\n   the release of prof2dot, a graphical profiling tool for use with\n   GHC. prof2dot is a filter that takes the profiling output generated by\n   running a GHC-compiled program with the \"+RTS -pix -RTS\", option and\n   turns it into a graphviz dot file.</p>\n<p><em>GHC switching to git</em>. Simon Marlow\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.glasgow.user/14819\">announced</a>\n   that the GHC team has made the decision to switch the version control\n   system hosting the GHC repository from darcs to git.</p>\n<p><em>Haddock 2.2.1</em>. David Waern\n   <a href=\"http://www.haskell.org//pipermail/haskell-cafe/2008-August/045791.html\">announced</a>\n   the release of version 2.2.1 of Haddock, the Haskell documentation tool.</p>\n<p><em>Haskore tutorial</em>. jinjing\n   is creating <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.cafe/42861\">a Haskore\n   tutorial</a> while learning it. Suggestions and corrections are welcome.</p>\n<p><em>Hoogle 4 beta</em>. Neil Mitchell\n   <a href=\"http://neilmitchell.blogspot.com/2008/08/hoogle-40-web-client-preview.html\">announced</a>\n   the availability of beta versions of Hoogle 4, both a <a href=\"http://haskell.org/hoogle/beta/\">web client</a> and <a href=\"http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hoogle\">command-line\n   version</a>.  Testing and <a href=\"http://code.google.com/p/ndmitchell/issues/list\">feedback</a>\n   welcome!</p>\n<p><em>Design your own xmonad shirt</em>. David Lazar\n   has prepared a design on <a href=\"http://spreadshirt.com/\">spreadshirt</a>\n   under Designs > Computer > Programming.  Choose the color and other\n   formatting and get your very own custom xmonad shirt!</p>\n<h4>Google Summer of Code</h4> <p>Progress\nupdates from participants in the 2008 <a href=\"http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2008\">Google\nSummer of Code.</a></p> <p><em>Generic tries</em>. Jamie Brandon\n   is working on a library for efficient maps using generalized tries.  This\n   week, he has worked on implementing AVL trees and has created several <a href=\"http://jamiiecb.blogspot.com/2008/08/more-benchmarks.html\">more</a> <a href=\"http://jamiiecb.blogspot.com/2008/08/yet-more-mini-benchmarks.html\">benchmarks</a>.</p>\n<p><em>Hoogle 4</em>. Neil Mitchell (ndm)\n   is working on <a href=\"http://code.haskell.org/hoogle/\">Hoogle 4</a>. <a href=\"http://neilmitchell.blogspot.com/2008/08/gsoc-hoogle-week-10.html\">This\n   week</a>, he finished up type search, which\n   now gives much better results than Hoogle 3.  He also <a href=\"http://neilmitchell.blogspot.com/2008/08/hoogle-40-release-beta-command-line.html\">released</a>\n   a <a href=\"http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hoogle\">public\n   beta version</a> of the command-line interface.  <a href=\"http://code.google.com/p/ndmitchell/issues/list\">Bug reports or\n   feature requests</a> are welcome.</p>\n<p><em>DPH physics engine</em>. Roman Cheplyaka (Feuerbach)\n   is working on a <a href=\"http://haskell.org/haskellwiki/Hpysics\">physics engine</a> using <a href=\"http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell\">Data\n   Parallel Haskell</a>. <a href=\"http://physics-dph.blogspot.com/2008/08/status-report-week-9-10.html\">Last\n   week</a>, he won second prize at the 2008 International Mathematics\n   Competition; while he was away he also found time to read several\n   papers on broad phase collision detection and to begin thinking about <a href=\"http://physics-dph.blogspot.com/2008/08/physics-and-polyhedra.html\">general\n   convex polyhedra</a>.</p>\n<p><em>GHC plugins</em>. Max Bolingbroke\n   is working on dynamically loaded plugins for GHC.</p>\n<p><em>Cabal dependency framework</em>. Andrea Vezzosi (Saizan)\n   is working on a <a href=\"http://code.haskell.org/~Saizan/cabal\">make-like\n   dependency analysis framework</a> for Cabal.</p>\n<p><em>Language.C</em>. Benedikt Huber (visq)\n   is <a href=\"http://www.sivity.net/projects/language.c/wiki/\">working on\n   Language.C</a>, a standalone parser/pretty printer library for C99.</p>\n<p><em>GHC API</em>. Thomas Schilling (nominolo)\n   is working on <a href=\"http://hackage.haskell.org/trac/ghc/wiki/GhcApiStatus\">improvements\n   to the GHC API</a>.</p>\n<h4>Discussion</h4> <p><em>poll: how can we help you contribute to\ndarcs?</em>. Eric Kow (kowey)\n   <a href=\"http://www.haskell.org//pipermail/haskell-cafe/2008-August/045701.html\">asked</a>\n   how the darcs team could better encourage more people to contribute,\n   precipitating a long and productive discussion with many good\n   suggestions.</p>\n<h4>Jobs</h4> <p><em>Lectureship in Functional Programming,\nNottingham</em>. Graham Hutton\n   <a href=\"http://article.gmane.org/gmane.comp.lang.haskell.general/16365\">announced</a>\n   an opening for a Lecturer (Assistant Professor) in the Functional\n   Programming Lab in Nottingham, a recently formed research group that\n   comprises Thorsten Altenkirch, Graham Hutton, Henrik Nilsson, four\n   research fellows, and eleven PhD students. Applications from the Haskell\n   community are encouraged! The closing date for applications is Friday,\n   15th August 2008.</p>\n<h4>Blog noise</h4> <a href=\"http://planet.haskell.org\">Haskell news</a> from\nthe  <a href=\"http://haskell.org/haskellwiki/Blog_articles\">blogosphere.</a>\n<ul><li><p>Roman Cheplyaka: <a href=\"http://physics-dph.blogspot.com/2008/08/physics-and-polyhedra.html\"><em>Physics\nand polyhedra</em></a>. </p></li>\n    <li><p>Chris Done: <a href=\"http://chrisdone.com/blog/2008/08/06/kibro-haskell-lighttpd-and-fastcgi/\"><em>Kibro:\n    Haskell, lighttpd and fastcgi</em></a>. </p></li> <li><p>Neil Mitchell: <a href=\"http://neilmitchell.blogspot.com/2008/08/hoogle-40-web-client-preview.html\"><em>Hoogle\n    4.0 web client preview</em></a>. </p></li> <li><p>>>> Sven Heyll: <a href=\"http://sheyll.blogspot.com/2008/08/lazy-evaluation-there-be-dragons-and.html\"><em>Lazy\n    Evaluation (there be dragons and basement\n    cats)</em></a>. </p></li> <li><p>Clifford Beshers: <a href=\"http://cliffordbeshers.blogspot.com/2008/08/two-dimensional-zip.html\"><em>Two-dimensional\n    zip</em></a>. </p></li> <li><p>Brent Yorgey: <a href=\"http://byorgey.wordpress.com/2008/08/04/philadelphia/\"><em>Philadelphia!</em></a>.\n    </p></li> <li><p>Luke Plant: <a href=\"http://lukeplant.me.uk/blog.php?id=1107301692\"><em>Haskell\n    API docs suck. A lot.</em></a>. </p></li> <li><p>Neil Mitchell: <a href=\"http://neilmitchell.blogspot.com/2008/08/hoogle-40-release-beta-command-line.html\"><em>Hoogle\n    4.0 release (beta, command line)</em></a>. </p></li>\n    <li><p>Mikael Johansson (Syzygy-): <a href=\"http://blog.mikael.johanssons.org/archive/2008/08/the-end-of-the-line/\"><em>The\n    end of the line</em></a>. </p></li> <li><p>Jamie Brandon: <a href=\"http://jamiiecb.blogspot.com/2008/08/yet-more-mini-benchmarks.html\"><em>Yet\n    more mini benchmarks</em></a>. </p></li>\n    <li><p>Douglas M. Auclair (geophf): <a href=\"http://logicaltypes.blogspot.com/2008/08/combinators-in-haskell.html\"><em>Combinators\n    in Haskell</em></a>. </p></li> <li><p>Holumbus: <a href=\"http://holumbus.fh-wedel.de/blog/?p=14\"><em>Search\n    Packages</em></a>. </p></li> <li><p>Douglas M. Auclair (geophf): <a href=\"http://logicaltypes.blogspot.com/2008/08/how-do-i-get-better.html\"><em>How\n    do I get better?</em></a>. </p></li> <li><p>Neil Mitchell: <a href=\"http://neilmitchell.blogspot.com/2008/08/gsoc-hoogle-week-10.html\"><em>GSoC\n    Hoogle: Week 10</em></a>. </p></li> <li><p>Dan Piponi (sigfpe): <a href=\"http://sigfpe.blogspot.com/2008/08/hopf-algebra-group-monad.html\"><em>Hopf\n    Algebra = Group + Monad</em></a>. </p></li> <li><p>>>> Ayumilove: <a href=\"http://www.5min.com/Video/Ayumilove-Haskell-Programming-Tutorial-Part-4-32807921?src=rss\"><em>Haskell\n    Programming Tutorial Part 4</em></a>. </p></li>\n    <li><p>Douglas M. Auclair (geophf): <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions.html\"><em>Trivial\n    Monad solutions</em></a>. </p></li> <li><p>Douglas M. Auclair (geophf): <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions-cont.html\"><em>Trivial\n    Monad solutions (cont.)</em></a>. </p></li>\n    <li><p>Douglas M. Auclair (geophf): <a href=\"http://logicaltypes.blogspot.com/2008/05/orators-exercise.html\"><em>Orators'\n    exercise</em></a>. </p></li> <li><p>Roman Cheplyaka: <a href=\"http://physics-dph.blogspot.com/2008/08/status-report-week-9-10.html\"><em>Status\n    report: week 9-10</em></a>.</p></li> <li><p>Matthew Sackman: <a href=\"http://www.wellquite.org/icfp_contest_2008_reflections.html\"><em>Reflections\n    on the ICFP Programming Contest\n    2008</em></a>. </p></li> <li><p>Jamie Brandon: <a href=\"http://jamiiecb.blogspot.com/2008/08/more-benchmarks.html\"><em>More\n    benchmarks</em></a>. </p></li> <li><p>Chris Done: <a href=\"http://chrisdone.com/blog/2008/08/01/ghci-on-acid-goa/\"><em>GHCi\n    on Acid (GOA)</em></a>. </p></li> <li><p>Audrey Tang: <a href=\"http://pugs.blogs.com/pugs/2008/08/pugs-now-builds.html\"><em>Pugs\n    now builds again from SVN.</em></a>. </p></li> <li><p>\"FP Lunch\": <a href=\"http://sneezy.cs.nott.ac.uk/fplunch/weblog/?p=109\"><em>An\n    ad-hoc approach to productive\n    definitions</em></a>. </p></li> <li><p>Ketil Malde: <a href=\"http://blog.malde.org/index.php/2008/07/31/a-plan-for-bloom-filters/\"><em>A\n    plan for Bloom filters</em></a>. </p></li> <li><p>Audrey Tang: <a href=\"http://pugs.blogs.com/pugs/2008/07/pugshs-is-back.html\"><em>Pugs.hs\n    is back.</em></a>. </p></li> <li><p>Holumbus: <a href=\"http://holumbus.fh-wedel.de/blog/?p=13\"><em>OpenSearch Available\n    Again</em></a>. </p></li></ul>\n<h4>Quotes of the Week</h4> <ul><li><em>shepheb</em>: don't forget\nYMCArray</li>\n    <li><em>matthew-_</em>: you know I increasingly think I'm a very bad\n    haskell programmer - I spend all my time programming at the type level,\n    which is basically untyped. So I just write untyped programs, that happen\n    to run at compile time.</li> <li><em>SyntaxNinja</em>: just picture\n    monads as tiny, silly, luminous, and devious sprites who fly around\n    your haskell code carrying state from one piece of code to another. I\n    don't think that'll help, but it can't hurt.</li> <li><em>poetix</em>:\n    Avoiding lambdas is pointless -- *groan*</li> <li><em>kzm</em>: My\n    program contains a bug. How ungrateful, after all I've done for it.</li>\n    <li><em>sw17ch</em>: FunPtrs do not live up to their name</li></ul>\n<h4>About the Haskell Weekly News</h4> <p>New editions are posted to\n   <a href=\"http://www.haskell.org/mailman/listinfo/haskell\">the Haskell\n   mailing list</a> as well as to <a href=\"http://sequence.complete.org/\">the\n   Haskell Sequence</a> and <a href=\"http://planet.haskell.org/\">Planet\n   Haskell</a>.  <a href=\"http://sequence.complete.org/node/feed\">RSS</a>\n   is also available, and headlines appear on <a href=\"http://haskell.org\">haskell.org</a>. Headlines are available as <a href=\"http://code.haskell.org/~byorgey/code/hwn/archives/20080806.pdf\">PDF</a>.</p>\n<p>To help create new editions of this newsletter, please\n   see the information on <a href=\"http://haskell.org/haskellwiki/HWN\">how\n   to contribute</a>. Send stories to <code>byorgey at cis dot upenn\n   dot edu</code>.  The darcs repository is available at <code>darcs get <a href=\"http://code.haskell.org/~byorgey/code/hwn/\">http://code.haskell.org/~byorgey/code/hwn/</a>\n   .</code></p>", homepage = "http://sequence.complete.org/hwn/20080806", isRead = True},RssItem {title = "Roman Cheplyaka: Physics and polyhedra", content = "<p>Thanks to my fellow physicist, Oleg Matveychuk, I've done with the collision\nhandler bug I said in the last status report. That was indeed a mistake in the\npaper (<a href=\"http://www.cs.cornell.edu/Courses/cs667/2005sp/readings/moore88.pdf\">Collision\n Detection and Response for Computer Animation</a>).</p>\n<p>One of the collision equation in that paper looks like\n<p><img src=\"http://www.codecogs.com/eq.latex?(v_2+\\omega_2\\times\\rho_2-v_1-\\omega_1\\times\\rho_1)\\cdot k=0.\" /></p>\nHere, <img src=\"http://www.codecogs.com/eq.latex?v_i\" /> is linear and <img src=\"http://www.codecogs.com/eq.latex?\\omega_i\" /> is angular velocity of each of two bodies,\n<img src=\"http://www.codecogs.com/eq.latex?\\rho_i\" /> is the vector pointing from center of mass to collision point, and <img src=\"http://www.codecogs.com/eq.latex?k\" />\nis normal to collision plane. The expression in parens, let's call it <img src=\"http://www.codecogs.com/eq.latex?V\" />, is\nrelative velocity of collision points of two bodies. So, Moore and Wilhelms\npropose to set <img src=\"http://www.codecogs.com/eq.latex?V\" /> to 0.</p>\n<p>It appears that this corresponds to completely unelastic collision (with\nrestitution coefficient equal to 0), and that's why it doesn't look too\nrealistic.</p>\n<p>If we have coefficient of restitution <img src=\"http://www.codecogs.com/eq.latex?\\alpha\" />, then proper equation is\n<img src=\"http://www.codecogs.com/eq.latex?V'=\\alpha V\" />, where <img src=\"http://www.codecogs.com/eq.latex?V'\" /> is taken after collision and <img src=\"http://www.codecogs.com/eq.latex?V\" /> before.</p>\n<p>Another thing I've done is support of generic polyhedra. For example, now we\ncan experiment not just with cubes, but with parallelepipeds or tetrahedra. And\nin future this will help us to handle arbitrary shapes by approximating them\nwith polyhedra, using point repulsion algorithm which I'm going to implement\n(it's also needed for semi-adjusting BSP trees).</p>", homepage = "http://physics-dph.blogspot.com/2008/08/physics-and-polyhedra.html", isRead = True},RssItem {title = "Chris Done: Kibro: Haskell, lighttpd and fastcgi", content = "<p>This is a follow-up from the <a href=\"http://chrisdone.com/blog/2008/07/28/haskell-fastcgi-lighttpd/\">previous post about Haskell, lighttpd and fastcgi</a>. I have come up with a simple framework with consists of a library called \"Kibro\" and an executable called \"kibro\". Both come in one package.</p>", homepage = "http://chrisdone.com/blog/2008/08/06/kibro-haskell-lighttpd-and-fastcgi/", isRead = True},RssItem {title = "Neil Mitchell: Hoogle 4.0 web client preview", content = "Since releasing a <a href=\"http://neilmitchell.blogspot.com/2008/08/hoogle-40-release-beta-command-line.html\">command line version</a> of Hoogle 4 yesterday, I've had some useful feedback from a number of people. As a result, I have added a few <a href=\"http://code.google.com/p/ndmitchell/issues/list\">bugs to the bug tracker</a>, and fixed a few mistakes in the searching and ranking. The <a href=\"http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hoogle\">Hoogle on Hackage</a> is currently 4.0.0.3 and is a recommended upgrade to all early testers.<br /><br />I've now written a web interface to Hoogle 4, which has been uploaded to <a href=\"http://haskell.org/hoogle/beta/\">http://haskell.org/hoogle/beta/</a>. This web interface is primarily so people can test searching/ranking without installing anything. There are a number of limitations:<br /><br /><ul><br /><li>The links to documentation do not work - this is the most severe problem, and probably stops people permanently changing to the new version.</li><br /><li>The Haddock documentation is not present.</li><br /><li>Some database entries are duplicates.</li><br /><li>The Lambdabot says feature is missing.</li><br /><li>The Suggestion feature is incomplete.</li><br /><li>The AJAX style client features are not present.</li><br /></ul><br /><br />The first three issues are fixed in Hoogle, but need various support through Haddock and Cabal to work. Other than these limitations, I am very interested in hearing what people think. As before, particularly regressions from Hoogle 3 or poor results/ranking.", homepage = "http://neilmitchell.blogspot.com/2008/08/hoogle-40-web-client-preview.html", isRead = True},RssItem {title = "Andr\195\169 Pang (ozone): Solid State Society", content = "The traditional hard disk that&rsquo;s likely to be in your computer right now is made out of a few magnetic circular platters, with a head attached to an actuator arm above the platter that reads and writes the data to it.  The head&rsquo;s such a microscopic distance away from the platter that it&rsquo;s equivalent to a <a href=\"http://www.atarimagazines.com/v5n6/InsideHardDisk.html\" rel=\"self\">Boeing 747 flying at 600 miles per hour about six inches off the ground</a>.  So, when you next have a hard disk crash (and that&rsquo;s <em>when</em>, not <em>if</em>), be amazed that the pilot in the 747 flying six inches off the ground didn&rsquo;t crash earlier.<br /><br />Enter solid-state drives (SSDs).  Unlike hard disks, SSDs contain no moving parts, and are made out of solid-state memory instead.  This has two big advantages: first, SSDs don&rsquo;t crash (although this is a small lie&mdash;more on that later).  Second, since SSDs are made out of memory, it&rsquo;s much faster than a hard disk to get to a particular piece of data on the disk.  In other words, they have a random access time that are orders of magnitude faster than their magnetic cousins.  Hard disks need to wait for the platter to rotate around before the head can read the data off the drive; SSDs simply fetch the data directly from a memory column &amp; row.  In modern desktop computers, random access I/O is often the main performance bottleneck, so if you can speed that up an order of magnitude, you could potentially make things a lot faster.<br /><br />Unfortunately, while SSDs are orders of magnitude faster than a hard disk for random access, they&rsquo;re also an order of magnitude more expensive.  That was until May this year, when this thing appeared on the scene:<br /><br /><a href=\"http://www.supertalent.com/datasheets/6_132.pdf\" rel=\"self\"><img class=\"imageStyle\" alt=\"super-talent-masterdrive-mx-ssd\" src=\"http://www.algorithm.com.au/blog/files/super-talent-masterdrive-mx-ssd.jpg\" width=\"387\" height=\"255\" /></a><br /><br />(Image courtesy of <a href=\"http://www.itechnews.net/2008/05/12/super-talent-mlc-sata-ii-ssds-for-laptops/\" rel=\"self\">itechnews.net</a>.)<br /><br />That boring-looking black box is a <a href=\"http://www.supertalent.com/datasheets/6_132.pdf\" rel=\"self\">120GB Super Talent Masterdrive MX</a>.   As far as SSD drives go, the Masterdrive MX is not particularly remarkable for its performance: it has a sustained write speed of just 40MB per second, which is a lot lower than many other SSDs and typical hard disks.  <br /><br />However, it&rsquo;s a lot cheaper than most other SSDs: the 120GB drive is USD$699.  That&rsquo;s not exactly cheap (you could easily get a whopping two terabytes of data if you spent that money on hard disks), but it&rsquo;s cheap enough that people with more dollars than sense might just go buy it&hellip; people like me, for instance.  I&rsquo;ve had that SSD sitting in my lovely 17&rdquo; MacBook Pro for the past two months, as an experiment with solid-state drives.  So, how&rsquo;d it go?<br /><br />I&rsquo;ll spare you the benchmarks: if you&rsquo;re interested in the raw numbers, there are a number of <a href=\"http://www.google.com/search?q=Super+Talent+Masterdrive+MX+review\" rel=\"self\">decent Masterdrive MX reviews</a> floating around the Web now.  I was more interested in the subjective performance of the drive.  Does it feel faster for everyday tasks?  Is it simply a better experience?<br /><br />The overall answer is: yes, it&rsquo;s better, but it&rsquo;s not so much better that I&rsquo;d buy the SSD again if I could go back in time.  With a hard disk, things occasionally get slow.  I&rsquo;m sure I&rsquo;m not the only one to witness the Spinning Beachball of Death while I wait 5-10 seconds for the hard disk to finally deliver the I/O operations to the programs that want them completed.  With a hard disk, launching a program from the dock would sometimes take 20-30 seconds under very heavy I/O load, such as when Spotlight&rsquo;s indexing the disk and Xcode&rsquo;s compiling something.  With the SSD, those delays just went away: I can&rsquo;t even remember a time where I saw the evil Beachball due to system I/O load.<br /><br />The most notable difference was in boot time.  A lot of people love how Mac OS X is pretty fast to boot (and I agree with them), but when you go to log in, it&rsquo;s a very different story.  If, like me, you&rsquo;ve got about ten applications and helper programs that launch when you log in, it can take literally minutes before Mac OS X becomes responsive.  I clocked my MacBook Pro at taking just over a minute to log in with my current setup on a hard disk (which launches a mere half a dozen programs); the SSD took literally about <em>5 seconds</em>.  5&hellip; 4&hellip; 3&hellip; 2&hellip; 1<em>done.  </em><em><a href=\"http://equotes.wetpaint.com/page/Darth+Vader+Quotes\" rel=\"self\">What is thy bidding, my master</a></em><em>?</em>  I wish I&rsquo;d made a video to demonstrate the difference, because it&rsquo;s insanely faster when you see it.  10x faster login speed is nothing to sneeze at.<br /><br />However, aside from boot up time, normal day-to-day operation really was about the same.  Sure, it was nice that applications launched faster and it booted so fast that you don&rsquo;t need to make a coffee anymore when logging in, but those were the only major performance differences that I saw.  Mac OS X and other modern operating systems cache data so aggressively that I guess most of the data you&rsquo;ll read and write will usually hit the cache first anyway.  The lower sustained write performance didn&rsquo;t end up being a problem at all: the only time I noticed it was when I was copying large <del>torrented downloads</del>files around on the same drive, but that wasn&rsquo;t slow enough for me to get annoyed.  The one benchmark that I really cared about&mdash;compiling&mdash;turned out to take exactly as long on the SSD as the hard disk.  I thought that maybe it was possible that random I/O write speed was a possible bottleneck with gcc; it turns out that&rsquo;s not true at all.  (I&rsquo;ll also point out that I was using Xcode to drive most of the compilation benchmarks, which is one of the fastest build systems I&rsquo;ve seen that uses gcc; no spastic libtool/automake/autoconf/<a href=\"http://www.algorithm.com.au/gallery/screenshots/recursive_make_and_autotools_silly\" rel=\"self\">autogoat insanity</a> here.)  Sorry to disappoint the other coders out there.<br /><br />Aside from performance, the total silence of the SSD was a nice bonus, but it&rsquo;s not something that you can&rsquo;t live without once you&rsquo;ve experienced it.  In most environments, there&rsquo;s enough background noise that you usually don&rsquo;t hear the quiet hard disk hum anyway, so the lack of noise from the SSD doesn&rsquo;t really matter.  It was, however, very cool knowing that you could shake your laptop while it was on without fear of causing damage to your data.  I&rsquo;m usually pretty careful about moving my laptop around while it&rsquo;s on, but with an SSD in there, I was quite happy to pick up the machine with one hand and wave it around in the air (as much as you can with a 17&rdquo; MacBook Pro, anyway).<br /><br />So, with all the nice small advantages of the SSD, you may be wondering why it&rsquo;s no longer in my MacBook Pro.  Here&rsquo;s some <a href=\"http://www.newegg.com/Product/ProductReview.aspx?Item=N82E16820609304\" rel=\"self\">reviews of the disk on newegg.com</a> that may give you a hint:<br /><br /><img class=\"imageStyle\" alt=\"Picture 3\" src=\"http://www.algorithm.com.au/blog/files/Picture 3.png\" width=\"480\" height=\"339\" /><br /><br />It turns out those reviewers were right.  Two months after I bought it, the Masterdrive MX completely died, which seemed like a pretty super talent for an SSD.  The Mac didn&rsquo;t even recognise the disk; couldn&rsquo;t partition it; couldn&rsquo;t format it.  So much for SSDs not crashing, eh?<br /><br />While SSDs don&rsquo;t crash in the traditional manner that a hard disk may, there&rsquo;s a whole number of other reasons why it might crash.  RAM&rsquo;s known to go wonky; there&rsquo;s no reason why that can&rsquo;t happen to solid-state memory too.  Maybe the SATA controller on the disk died.  No matter what the cause, you have the same problem as a traditional hard disk crash: unless you have backups, you&rsquo;re f*cked.  Plus, since I was on holiday down at Mount Hotham, my last backup was two weeks ago, just before I left for holiday.  All my Mass Effect saved games went kaboom, and I just finished the damn game.  Andr&eacute; not very happy, grrr.<br /><br /><p>So, what&#8217;s the PowerPoint summary?</p>\n\n\n<ul>\n<li>The Super Talent Masterdrive MX would be great buy if it didn&#8217;t friggin&#8217; crash and burn your data with scary reliability.  Even if you&#8217;re a super storage geek, avoid this drive until they have the reliability problems sorted out.</li>\n<li><a href=\"http://www.powerbookguy.com/\">The Powerbook Guy</a> on Market St in San Francisco is awesome.  They were the guys to install the <span class=\"caps\">SSD </span>in my MacBook Pro, and were extremely fast (two-hour turnaround time), professional, and had reasonable prices.  (I would&#8217;ve done it myself, but I&#8217;d rather keep the warranty on my A$5000 computer, thanks.)  Plus, they sold me the <a href=\"http://www.wihatools.com/200seri/261serie.htm\">coolest German screwdriver ever</a> for $6.  (&#8220;This one screwdriver handles every single screw in a MacBook Pro&#8221;.  Sold!)</li>\n<li>The <a href=\"http://www.maccentric.com.au/mac072/contact.php\">MacCentric service centre in Chatswood</a> in Sydney is equally awesome.  When the <span class=\"caps\">SSD </span>died, they quoted me the most reasonable price I had ever seen for a hard disk swap in a MacBook Pro (have you seen how many screws that thing has?), and also had a two-hour turnaround time.  Yeah, I know, decent Mac service in Australia!  Woooooah.</li>\n<li>Back up.</li>\n<li><span class=\"caps\">SSD</span>s are great.  I think they&#8217;ll complement rather than replace hard disks in the near future, and possibly replace them entirely if the price tumbles down enough.  <a href=\"http://www.google.com/search?q=Intel+SSD\">Next-generation <span class=\"caps\">SSD</span>s</a> are going to completely change the storage and filesystem games as they do away with the traditional stupid block-based I/O crap, and become directly addressable like <span class=\"caps\">RAM </span>is today.  Just don&#8217;t believe the hype about <span class=\"caps\">SSD</span>s not crashing.</li>\n</ul>\n\n\n\n<p>I, for one, welcome the <a href=\"http://www.amazon.com/Ghost-Shell-Solid-State-Society/dp/B000PWQPAC\">solid state society</a>.  Bring on the future!</p>", homepage = "http://www.algorithm.com.au/blog/files/solid-state-society.php#unique-entry-id-593", isRead = True},RssItem {title = "Clifford Beshers: Two-dimensional zip", content = "I've been doing battle with things like CSS recently (the W3C will be first against the wall when the revolution comes,) so it was a pleasure to run into a little Haskell puzzle and an elegant solution.<br /><br />I was working with a matrix represented with a list of lists: [[a]]. I wanted to add the row and column indices to each element, giving: [[((Integer,Integer),a)]].<br /><br />This isn't a pattern I remember seeing before, but it seemed simple enough, so I just hacked away. Here's my first try:<br /><br />> index grid = zipWith indexrow [0..] grid<br />>  &nbsp; &nbsp; where indexrow rn rs = zipWith (\\cn r -> ((rn,cn),r)) [0..] rs<br /><br />Serviceable, but neither pretty nor general.  The one dimensional case is so elegant; for any list, you can add indices with:<br /><br />> index1d xs = zip [0..] xs<br /><br />The zip function is simple and the infinite list of indices covers all cases.  So it occurred to me I was looking for two things: a two-dimensional version of zip; and a grid of index tuples, semi-infinite in both directions.<br /><br />Both turned out to be simple enough.  Here's the grid of tuples using list comprehensions:<br /><br />> indices2d = [[(r,c) | c - [0..]] | r - [0..]]<br /><br />And the two-dimensional zip:<br /><br />> zip2d = zipWith zip<br /><br />And it's easy to reproduce the \"With\" version:<br /><br />> zip2dWith f =  zipWith (zipWith f)<br /><br />So now my function looks like this:<br /><br />> index2d grid = zip2d indices2d grid<br /><br />or just:<br /><br />> index2d' = zip2d indices2d<br /><br />This version is clearer, simpler and easily generalizable to higher dimensions.", homepage = "http://cliffordbeshers.blogspot.com/2008/08/two-dimensional-zip.html", isRead = True},RssItem {title = "Brent Yorgey: Philadelphia!", content = "<div class=\"snap_preview\"><br /><p>My wife and I have now completed our move to Philadelphia!  Nothing much to report, really &#8212; the move went very smoothly with a lot of great help from friends, and we&#8217;re slowly digging our way out from under all the boxes and getting settled.  The reason for the move, as you may or may not know, is that I&#8217;ll be starting a PhD in programming languages at U Penn.  Classes start in a month, and I don&#8217;t think I&#8217;ve been this excited to go back to school since my first day of junior high school &#8212; I&#8217;ve been out of undergrad four years now!  I do hope to get on campus earlier than the start of classes, hopefully sometime later this week, to begin getting involved in stuff and get my bearings a bit.</p>\n<img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/categories/byorgey.wordpress.com/80/\" /> <img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/tags/byorgey.wordpress.com/80/\" /> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/byorgey.wordpress.com/80/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/byorgey.wordpress.com/80/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godelicious/byorgey.wordpress.com/80/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/byorgey.wordpress.com/80/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gostumble/byorgey.wordpress.com/80/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/byorgey.wordpress.com/80/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/godigg/byorgey.wordpress.com/80/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/byorgey.wordpress.com/80/\" /></a> <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/goreddit/byorgey.wordpress.com/80/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/byorgey.wordpress.com/80/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=byorgey.wordpress.com&amp;blog=1152889&amp;post=80&amp;subd=byorgey&amp;ref=&amp;feed=1\" /></div>", homepage = "http://byorgey.wordpress.com/2008/08/04/philadelphia/", isRead = True},RssItem {title = "Luke Plant: Haskell API docs suck. A lot.", content = "<p>\nHaskell API documentation is very lacking for newbies.  For instance, I want to understand how to create and use regexes.  If you start at <a class=\"ext-link\" href=\"http://hackage.haskell.org/packages/archive/regex-posix/0.93.1/doc/html/Text-Regex-Posix.html\"><span class=\"icon\">Text.Regex.Posix documentation</span></a>, it tells you that <tt>=~</tt> and <tt>=~~</tt> are the high level API, and the hyperlinks for those functions go to Text.Regex.Posix.Wrap, where the main functions are not actually documented at all!  \n</p>\n<p>\nSo we look at the type signatures -- here is the first:\n</p>\n<pre class=\"wiki\">(=~) :: (RegexMaker Regex CompOption ExecOption source, RegexContext Regex source1 target) =&gt; source1 -&gt; source -&gt; target\n</pre><p>\nSo, that leads me to the class declarations for these things.  But trying to understand them is rather intimidating:\n</p>\n<pre class=\"wiki\">class RegexOptions regex compOpt execOpt | regex -&gt; compOpt execOpt, compOpt -&gt; regex execOpt, execOpt -&gt; regex compOpt where\n</pre><p>\nOr how about this?\n</p>\n<pre class=\"wiki\">class RegexOptions regex compOpt execOpt =&gt; RegexMaker regex compOpt execOpt source | regex -&gt; compOpt execOpt, compOpt -&gt; regex execOpt, execOpt -&gt; regex compOpt where\n</pre><p>\nThey are using multi-parameter type classes and functional dependencies.  Having read bits of Haskell for a while, I happen to know what they are (vaguely), but I don't really understand them, nor does the above really give me any clue to how to actually use this API.\n</p>\n<p>\nGoogle to the rescue.  (This is bad: I shouldn't have to google for documentation when I'm already looking at the obvious place for something to be documented). The first result for \"haskell regex\" is a completely useless and hopeless out of date page, but there is a <a class=\"ext-link\" href=\"http://www.serpentine.com/blog/2007/02/27/a-haskell-regular-expression-tutorial/\"><span class=\"icon\">Haskell regex tutorial</span></a> on a blog that shows us how to do it, and it is astonishingly simple:\n</p>\n<pre class=\"wiki\">&gt; \"bar\" =~ \"(foo|bar)\" :: String\n\"bar\"\n</pre><p>\nSo what is going on?  It looks like the library has been designed extremely cleverly so that in the simple case (regex with default options etc), you can use it very easily, but you don't need to use different functions if you want to add regex options.  Furthermore, it is polymorphic in its return type, so we can also do this:\n</p>\n<pre class=\"wiki\">&gt; \"bar\" =~ \"(foo|bar)\" :: Bool\nTrue\n</pre><p>\nIn fact you can get lists of matches, or lists of match offsets etc -- almost anything you can think, just by specifying (directly or using type inference) the type of the result you want.  This is beautifully elegant and clever and I'm sure it gave the designer a warm fuzzy feeling inside (well, it gives me one, and I'm just looking at it).  The downside is that if you try to use <tt>=~</tt> at a GHCi prompt without a type annotation, you just get a ridiculously unhelpful error.  \n</p>\n<p>\nThe problem here is that making the library so clever has also made it utterly impenetrable to the beginner.  The main functions are not even documented, and there is no explanation of the crazy type signature.  You might say that it is simply a documentation problem, but it is actually a combination of the two -- if the type signature had been something simple, it would have been easy to deduce how to use it.  It seems to me that the documentation of a library has got to be proportional to the cleverness of its type signatures, or people are going to be absolutely lost.  Since Haskell libraries are almost always implemented by Haskell gurus, and they implement them with <strong>themselves</strong> in mind (I have no objection to this, they are enthusiasts working for free), they use lots of clever code and advanced Haskell techniques.  But this means that if you want people to actually use these libraries (and by consequence Haskell itself), the documentation for Haskell libraries has to be about <strong>an order of magnitude better</strong> than anything you'd find anywhere else.  I suspect it is at least <strong>an order of magnitude worse</strong> than for something like .NET APIs, which means that relatively speaking the documentation of Haskell is currently in an absolutely dire state.\n</p>\n<p>\nSorry, I'm just saying it like it is.  These libraries are great when you can get them to work, and I'm really grateful to the authors for their fantastic work, and the effort that has gone into packaging and distributing them (so that <a class=\"ext-link\" href=\"http://hackage.haskell.org/trac/hackage/wiki/CabalInstall\"><span class=\"icon\">installation is literally one short command-line away</span></a>), but the hurdles are <strong>still</strong> currently far too great compared to any other language for Haskell to become popular.\n</p>\n<p>\nMoving forward, I guess one problem is contributing to a library's documentation.  There is nothing on the API doc pages that shows you how to do this.  I suspect you need to check out the source with darcs (not something I do normally, I just use cabal) and then start email patches or something.  Even then, I don't know if I would contribute any documentation -- 'howto' style documentation seems out of place on the API pages, but it is desperately needed.\n</p>\n<hr />\n<p></p>", homepage = "http://lukeplant.me.uk/blog.php?id=1107301692", isRead = True},RssItem {title = "Neil Mitchell: Hoogle 4.0 release (beta, command line)", content = "I am pleased to announce Hoogle 4.0, <a href=\"http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hoogle\">available on Hackage</a>. A couple of things to note:<br /><br /><ul><br /><li>This is a release of the command-line version only. It will have identical searching abilities to the web-based version, which I'm about to write.</li><br /><li>It currently only searches the same packages as Hoogle 3 (the final release will search more).</li><br /><li>It currently doesn't support the <tt>--info</tt> flag as previously described (problems with Haddock, not with Hoogle).</li><br /></ul><br /><br /><b>Walkthrough: Installation</b><br /><br />If you have cabal-install available, it should be as simple as:<br /><br /><pre><br />$ cabal update &amp;&amp; cabal install hoogle<br /></pre><br /><br />Otherwise, follow the standard Cabal/Hackage guidelines. Hoogle depends on about 4 packages on Hackage which are not available with a standard GHC install, so these will need to be built.<br /><br /><b>Walkthrough: A few searches</b><br /><br />Here are some example searches. I have used <tt>--count=5</tt> to limit the number of results displayed. If you are using a terminal with ANSI escape codes I recommend also passing <tt>--color</tt> to enable colored output.<br /><br /><pre><br />$ hoogle map --count=5<br />Prelude map :: (a -> b) -> [a] -> [b]<br />Data.ByteString map :: (Word8 -> Word8) -> ByteString -> ByteString<br />Data.IntMap map :: (a -> b) -> IntMap a -> IntMap b<br />Data.IntSet map :: (Int -> Int) -> IntSet -> IntSet<br />Data.List map :: (a -> b) -> [a] -> [b]<br /><br />$ hoogle \"(a -> b) -> [a] -> [b]\" --count=5<br />Prelude map :: (a -> b) -> [a] -> [b]<br />Data.List map :: (a -> b) -> [a] -> [b]<br />Control.Parallel.Strategies parMap :: Strategy b -> (a -> b) -> [a] -> [b]<br />Prelude fmap :: Functor f => (a -> b) -> f a -> f b<br />Control.Applicative $> :: Functor f => (a -> b) -> f a -> f b<br /><br />$ hoogle Data.Map.map --count=5<br />Data.Map map :: (a -> b) -> Map k a -> Map k b<br />Data.Map data Map k a<br />module Data.Map<br />Data.Map mapAccum :: (a -> b -> (a, c)) -> a -> Map k b -> (a, Map k c)<br />Data.Map mapAccumWithKey :: (a -> k -> b -> (a, c)) -> a -> Map k b -> (a, Map k c)<br /><br />$ hoogle \"Functor f => (a -> b) -> f a -> f b\" --count=5<br />Prelude fmap :: Functor f => (a -> b) -> f a -> f b<br />Control.Applicative $> :: Functor f => (a -> b) -> f a -> f b<br />Control.Monad fmap :: Functor f => (a -> b) -> f a -> f b<br />Control.Monad.Instances fmap :: Functor f => (a -> b) -> f a -> f b<br />Data.Traversable fmapDefault :: Traversable t => (a -> b) -> t a -> t b<br /></pre><br /><br /><b>How you can help</b><br /><br />I've released a command line version of the search to solicit feedback. I'm interested in all comments, but especially ones of the form:<br /><br /><ul><br /><li>I prefer the command line version of Hoogle 3 because ...</li><br /><li>When I search for ... I would expect result ... to appear, or to appear above result ...</li><br /><li>I was hoping for the feature ...</li><br /><li>It takes too long when I ...</li><br /></ul><br /><br />I'm going to be accumulating Hoogle 4 bugs in <a href=\"http://code.google.com/p/ndmitchell/issues/list\">my bug tracker</a>, or by email (<a href=\"http://www-users.cs.york.ac.uk/~ndm/contact/\">http://www-users.cs.york.ac.uk/~ndm/contact/</a>) - whichever you find more convenient.<br /><br />Now I'm going to start work on the Web search :-)", homepage = "http://neilmitchell.blogspot.com/2008/08/hoogle-40-release-beta-command-line.html", isRead = True},RssItem {title = "Mikael Johansson (Syzygy-): The end of the line", content = "<p>And a new beginning.</p>\n<p>We seem to be a whole crowd finishing our PhDs all at the same time: <a href=\"http://pozorvlak.livejournal.com\">pozorvlak</a>, <a href=\"http://gooseania.blogspot.com\">Gooseania</a> and I. While my blog <em>started</em> as inspired by Gooseania, I won&#8217;t close it just because I&#8217;m done. I&#8217;ll continue blogging my Postdoc years, and hopefully all the way through my academic career.</p>", homepage = "http://blog.mikael.johanssons.org/archive/2008/08/the-end-of-the-line/", isRead = True},RssItem {title = "Jonathan Tang: More on multimethods", content = "Some more thoughts to synthesize some of yesterday's post, in preparation for implementation:<br /><br /><span>Capabilities</span><br /><br />I remembered another important consideration after writing yesterday's blog post: security.  Say that you have a feature that lets you dynamically import a module yet restrict the imports that it can access:<br /><pre><br /> safe_modules = ['eve.data.*', 'eve.math', 'eve.regexp']<br /> plugins = list_dir('plugins') -> filter(ext(?, 'eve'), ?)<br />         -> map(dynamic_import(?, safe_modules), ?)<br /></pre><br />If the only methods that are accessible are those that are explicitly imported, then you know that no code in these modules may access other, unsafe functionality.  But if multimethods silently import other implementations, there's no guarantee that one of the multimethods in eve.data.sequence doesn't have an implementation in unsafe.file_access that it can use to stomp on the local hard disk.  Security auditing just got much more difficult: instead of simply looking at the data you're passing in to the plugin and ensuring that safe_modules really are safe, you've got to examine every module that subtypes a type in safe_modules.<br /><br /><span>Method Dispatch</span><br /><br />One of the comments in the other post pointed out that Dylan solved many of these multiple dispatch in an intended-for-production-use language.  Dylan's method dispatch is similar to Cecil's: it compares each argument for specificity, and if two argument positions conflict, then the methods are ambiguous and don't participate in method dispatch.<br /><br />Dylan's approach also handles keyword arguments: since it makes no reference to argument position, the arguments don't have to be positional.<br /><br />If I stick with multimethods, I'll probably go with something like this.  Dylan's approach is actually more complicated than I need, because they allow multiple inheritance and so need to worry about <a href=\"http://192.220.96.201/dylan/linearization-oopsla96.html\">monotonic linearizations</a> and such.  I should be able to use simple subtyping rules on the declared method types, straight out of TAPL.<br /><br /><span>Dropping multimethods entirely?</span><br /><br />I'm thinking that it may be best to drop multimethods entirely and rely on a very Pythonic single-dispatch object system.  Obviously it'll be a bit different since objects are immutable, but languages like Python, Java, Smalltalk, and Ruby have basically figured this out and worked out most of the kinks.  I'm reminded of GvR's <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=147358\">Language Design is Not Just Solving Puzzles</a> - there's a point where each additional feature you add increases complexity rather than reducing it.<br /><br />So, we can treat methods as simple fields of records where the first argument is the record itself.  Same as in OO C, or Python.  Maybe have some syntactic sugar to make it easy.  This approach has already been well-tested, it's \"good enough\", and it lets me get to the more interesting work of defining libraries.<br /><br />There's one issue with this: in my Python programming, I frequently start prototyping using built-in data structures (dicts, tuples) and standalone functions, and then later refactor it to use classes.  The prototyping stage is necessary, because it's usually not clear what fields are necessary, what functions are necessary, and how those functions should be organized.  But the process of refactoring introduces a big discontinuity that usually requires that the program be rewritten entirely, because it changes the calling syntax to access everything that becomes a class.<br /><br />I'd like to be able to transparently \"harden\" a program, making the classes and data structures more well-defined and organized without having to touch every single place that I use them.<br /><br />The existing equivalence between function calls and record field access is one attempt at this, but it's limited to being able to compute fields from the existing data in the record.  A good start - no need for the @property built-in with this - but it falls down horribly when you need additional arguments.<br /><br />Some code will help.  What I want is for this:<br /><pre><br />    def foo(self, arg1, arg2): ...<br />    foo(obj, x, y)<br /></pre><br />To be equivalent to this:<br /><pre><br />    class Foo:<br />        def foo(self, arg1, arg2): ...<br />    obj.foo(x, y)<br /></pre><br />With equivalent meaning that the method calls look exactly the same, so you could first convert the method definition to the class form, have your program still work, and then convert each individual call to the obj.method syntax at your leisure.<br /><br />Bonus points if the resulting syntax looks like the one for function pipelining; I really dislike the idea of introducing two different function call syntaxes like I suggested yesterday.<br /><br />The obvious solution is to overload the function call syntax so that if the function isn't found, it looks for a matching field in the first argument and then executes that.  Then the method invocation syntax could just be syntactic sugar.  <br /><br />Another neat (though potentially confusing) effect of this is that local function definitions shadow method calls, so you can locally specialize particular method calls.  I'm a bit worried about name conflicts with this, though.<br /><br />There're two problems with this: it leaves no way to get the actual bound method, and the precedence rules are wrong if it needs to coincide with function pipelining.  The first problem can be worked around easily enough using partial-application: if obj->foo(arg1, arg2) is syntactic sugar for foo(obj, arg1, arg2), then obj->foo(?, ?) is syntactic sugar for {| x, y | foo(obj, x, y)}, which is exactly what you'd use a bound method for.  This is also more flexible, since you can bind any one of the arguments instead of just the message receiver.<br /><br />The second one is potentially a problem.  Normally, you'd expect:<br /><pre><br />    obj->method1(a, b)->method2(c, d)<br /></pre><br />to invoke method1 on object, then invoke method2 on the result.  But with the existing -> definition, it parses to:<br /><pre><br />    method2(method1(obj, a, b), c, d)<br /></pre><br />Oh wait, that's correct.  So the confusing part is if were expecting to use partial application to setup a pipeline, like the example at the beginning:<br /><pre><br />     safe_modules = ['eve.data.*', 'eve.math', 'eve.regexp']<br />     plugins = list_dir('plugins') -> filter(ext(?, 'eve'), ?)<br />             -> map(dynamic_import(?, safe_modules), ?)<br /></pre><br />This would parse to map(filter(list_dir('plugins'), ext(?, 'eve'), ?) ...), which is nonsense.  Perhaps just allowing people people to parenthesize expressions?  Combining this with sane methods (like map &amp; filter being methods of sequence types), the above example would look like this:<br /><pre><br />     safe_modules = ['eve.data.*', 'eve.math', 'eve.regexp']<br />     plugins = list_dir('plugins') -> filter(? -> ext('eve'))<br />             -> map(dynamic_import(?, safe_modules))<br /></pre><br />Not so bad.  The big test is what happens if call them in an order that's not bound to the receiver:<br /><pre><br />     FILTERS = [ext(?, 'svn'), starts_with(?, '.'), ends_with(?, '~'), ext(?, 'swp')]<br />     def all_files(dir):<br />         list_dir(dir) -> (fold(FILTERS, map -> flip, ?))<br /></pre><br />I <span>think</span> that'd work, and it doesn't look so bad, but it's probably best just to try it out and see rather than work it all out in my head.", homepage = "http://eve-language.blogspot.com/2008/08/more-on-multimethods.html", isRead = True},RssItem {title = "Jamie Brandon: Yet more mini benchmarks", content = "Ive uploaded IntMap (like OrdMap its finished except for 'merge'). This mini-benchmark is much like the last.<br /><br /><pre><span>&gt;</span> <span>{-# OPTIONS_GHC -O2 -fno-monomorphism-restriction #-}</span><br /><span>&gt;</span> <span><u>import</u></span> <span><u>qualified</u></span> Data<span>.</span>Map <span><u>as</u></span> M<br /></pre><br /><pre><span>&gt;</span> <span><u>import</u></span> <span><u>qualified</u></span> Data<span>.</span>GMap <span><u>as</u></span> G<br /><span>&gt;</span> <span><u>import</u></span> Data<span>.</span>GMap<span>.</span>ListMap<br /><span>&gt;</span> <span><u>import</u></span> Data<span>.</span>GMap<span>.</span>OrdMap<br /><span>&gt;</span> <span><u>import</u></span> Data<span>.</span>GMap<span>.</span>IntMap<br /></pre><br /><pre><span>&gt;</span> <span><u>import</u></span> Control<span>.</span>Monad<br /><span>&gt;</span> <span><u>import</u></span> Data<span>.</span>Maybe<br /></pre><br /><pre><span>&gt;</span> <span>(</span><span>$$</span><span>)</span> <span>=</span> liftM<br /></pre><br />This time we will turn gibberish characters in gibberish Ints<br /><br /><pre><span>&gt;</span> dict <span>=</span> <span>{-# SCC \"dict\" #-}</span> map <span>(</span>map fromEnum<span>)</span> <span>$$</span> take <span>800000</span> <span>$$</span> lines <span>$$</span> readFile <span>\"gibberish\"</span><br /></pre><br /><pre><span>&gt;</span> test <span>=</span> <span>{-# SCC \"test\" #-}</span> <span><u>do</u></span><br /><span>&gt;</span> d <span>&lt;-</span> dict<br /><span>&gt;</span> <span><u>let</u></span>  mp <span>::</span> M<span>.</span>Map <span>[</span>Int<span>]</span> ()<br /><span>&gt;</span>  mp <span>=</span> <span>{-# SCC \"Map.fromList\" #-}</span> M<span>.</span>fromAscList <span>$</span> zip d <span>$</span> repeat ()<br /><span>&gt;</span> return <span>$</span> all isJust <span>$</span> map <span>(</span><span>\\</span>w <span>-&gt;</span> <span>{-# SCC \"Map.lookup\" #-}</span> M<span>.</span>lookup w mp<span>)</span> d<br /></pre><br /><pre><span>&gt;</span> testL <span>=</span> <span>{-# SCC \"testL\" #-}</span> <span><u>do</u></span><br /><span>&gt;</span> d <span>&lt;-</span> dict<br /><span>&gt;</span> <span><u>let</u></span>  mp <span>::</span> ListMap <span>(</span>OrdMap Int<span>)</span> Int ()<br /><span>&gt;</span>  mp <span>=</span> <span>{-# SCC \"OrdList-GMap.fromAssocs\" #-}</span> G<span>.</span>fromAssocsAsc <span>$</span> zip d <span>$</span> repeat ()<br /><span>&gt;</span> return <span>$</span> all isJust <span>$</span> map <span>(</span><span>\\</span>w <span>-&gt;</span> <span>{-# SCC \"OrdList-GMap.lookup\" #-}</span> G<span>.</span>lookup w mp<span>)</span> d<br /></pre><br />IntMap is an avl tree over unboxed Ints.<br /><br /><pre><span>&gt;</span> testI <span>=</span> <span>{-# SCC \"testI\" #-}</span> <span><u>do</u></span><br /><span>&gt;</span> d <span>&lt;-</span> dict<br /><span>&gt;</span> <span><u>let</u></span>  mp <span>::</span> ListMap IntMap Int ()<br /><span>&gt;</span>  mp <span>=</span> <span>{-# SCC \"IntList-GMap.fromAssocs\" #-}</span> G<span>.</span>fromAssocsAsc <span>$</span> zip d <span>$</span> repeat ()<br /><span>&gt;</span> return <span>$</span> all isJust <span>$</span> map <span>(</span><span>\\</span>w <span>-&gt;</span> <span>{-# SCC \"IntList-GMap.lookup\" #-}</span> G<span>.</span>lookup w mp<span>)</span> d<br /></pre><br /><pre><span>&gt;</span> main <span>=</span> <span><u>do</u></span><br /><span>&gt;</span> print <span>=&lt;&lt;</span> test<br /><span>&gt;</span> print <span>=&lt;&lt;</span> testL<br /><span>&gt;</span> print <span>=&lt;&lt;</span> testI<br /></pre><br />And ...<br /><br />total time  =       24.48 secs   (1224 ticks @ 20 ms)<br />total alloc = 7,092,895,320 bytes  (excludes profiling overheads)<br /><br />COST CENTRE              %time %alloc <br /><br /> Map.lookup                8.2    0.1<br /> Map.fromList              0.2    0.5<br /><br /> OrdList-GMap.lookup       8.9    0.7<br /> OrdList-GMap.fromAssocs   0.5    0.5<br /><br /> IntList-GMap.lookup       4.7    0.7<br /> IntList-GMap.fromAssocs   0.3    0.5<br /><br />IntMap is a fair bit faster than the others, as you would expect from such a specialised data structure. So what am I going to do with it?<br /><br />Heres a snippet of Data.Serial (based heavily on Data.Binary)<br /><br /><pre><span>&gt;</span> <span><u>class</u></span> Serial a <span><u>where</u></span><br /><span>&gt;</span> put <span>::</span> a <span>-&gt;</span> Put a<br /><span>&gt;</span> get <span>::</span> Get a<br /></pre><br /><pre><span>&gt;</span> encode <span>::</span> Serial a <span>=&gt;</span> a <span>-&gt;</span> <span>[</span>Int<span>]</span><br /></pre><br />So I can now run off and write<br /><br /><pre><span>&gt;</span> <span><u>data</u></span> SerialMap k a <span>=</span> SerialMap <span>(</span>ListMap IntMap Int a<span>)</span><br /></pre><br /><pre><span>&gt;</span> <span><u>instance</u></span> Serial k <span>=&gt;</span> Map <span>(</span>SerialMap k<span>)</span> k <span><u>where</u></span> <span>...</span><br /></pre><br />Hopefully with some tweaking the Serial package will become fast enough for this to be interesting. This is aimed at situations where you might want to trade off access time (encoding is always going to slow this down) for space (4 UTF8 chars to an Int :-D ).", homepage = "http://jamiiecb.blogspot.com/2008/08/yet-more-mini-benchmarks.html", isRead = True},RssItem {title = "Holden Karau: Its back!", content = "I've got my computer back. The repair job was done in the back of a land rover. With two 20 something guys standing around the back of a truck the police decided to take a quick look, but once they saw the computer all was well. This is one of the odder places I've had my computer repaired, but the new component seems to be working well. Now I can get back to fun coding times :)\n<p><a href=\"http://feeds.feedburner.com/~a/holdenkarau/iYtm?a=gApWZq\"><img src=\"http://feeds.feedburner.com/~a/holdenkarau/iYtm?i=gApWZq\" border=\"0\" /></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?a=KKx3EK\"><img src=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?i=KKx3EK\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?a=MkQYSK\"><img src=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?i=MkQYSK\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?a=bctB6k\"><img src=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?i=bctB6k\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?a=jmjF7K\"><img src=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?i=jmjF7K\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?a=VPojdK\"><img src=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?i=VPojdK\" border=\"0\" /></a> <a href=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?a=JLGp1k\"><img src=\"http://feeds.feedburner.com/~f/holdenkarau/iYtm?i=JLGp1k\" border=\"0\" /></a>\n</div><img src=\"http://feeds.feedburner.com/~r/holdenkarau/iYtm/~4/355646164\" height=\"1\" width=\"1\" />", homepage = "http://feeds.feedburner.com/~r/holdenkarau/iYtm/~3/355646164/its-back.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Combinators in Haskell", content = "In this article, instead of continuing along my path of shoving Prolog (predicate logic) into Haskell, I'll take a break from that and shove Haskell into Haskell.  This turn comes by way of my recent professional experience working with Prolog &mdash; I found myself oftentimes needing to write some purely functional code, but I found the Prolog semantics getting in my way, so, borrowing some of the ideas from my previous professional programming experiences with <a href=\"http://www.cs.mu.oz.au/research/mercury/\">Mercury</a> and <a href=\"http://www.opendylan.org/\">Dylan</a> (when Harlequin was still a going concern, and had picked up the Dylan ball that Apple, then CMU, dropped, making a really sweet Dylan programming environment), I implemented a <a href=\"http://www.cotilliongroup.com/libraries.html\">set of libraries</a> for Prolog, including basic ZF-set operations, propositional logic syntax, list/set/bag utilities, and the combinator logic of Sch&ouml;nfinkel.<br /><blockquote>\"geophf!\" You exclaim, horrified, \"you don't really use combinators to write working production code, do you?\"</blockquote><br />Well, yes, and I also proposed a <a href=\"http://www.cotilliongroup.com/arts/penguin.html\">new one</a> in addition to the ones covered by Smullyan in <a href=\"http://www.amazon.com/Mock-Mockingbird-Raymond-M-Smullyan/dp/0192801422\"><em>To Mock a Mockingbird</em></a>, and have <a href=\"http://www.cotilliongroup.com/arts/void-meditations.html\">studied the make-up of the \"void\" combinator</a> of <a href=\"http://www.madore.org/~david/programs/unlambda/\">Unlambda</a>, so I'm one of those kinds of programmers.<br /><br />In short, when I was working with Prolog, I shoe-horned a Haskell interpreter into to be able to write map and fold when I wished to write map and fold.  Since Prolog has <a href=\"http://www.cotilliongroup.com/arts/DCG.html\">DCGs</a> (Definite Clause Grammars), I lived a monad-free and worry-free life.  Ah, yes, those were the days.<br /><br />That was quite a trip down memory lane.  Looking back, I marvel at my fortune, not only have I professionally programmed in those languages (and VisualWorks Smalltalk; that was fun when I presented the boss a solution in two weeks that he was expecting in two months &mdash; he was so impressed that he bought the VisualWorks system for the contract, made me mentor a junior programmer on Smalltalk (Chris Choe, a good guy to work with), and had me teach a brown bag course at work on Smalltalk, but I digress, again), but it looks like Haskell is now part of our solution at my current place of work.<br /><br />Life is good.<br /><br />Of course, it would be so much better if I had access to the primitive combinators in Haskell (did Miranda allow that kind of low-level access, I wonder).  I mean, why should one write out '<kbd>const</kbd>', a whole FIVE characters, when one simply wishes to use the <code>K</code> combinator.  <a href=\"http://logicaltypes.blogspot.com/2008/07/dont-know-dont-care-whatever.html#bk3\">I felt that very pain</a> all too recently.  I had that freedom using my <a href=\"http://www.cotilliongroup.com/man/combinators-man.html\">combinator library</a> when I was working on Prolog ... goodness, even MITRE fabricated the Curry Chip.<br /><br />So, I could not put it off any longer, I pulled out my dog-eared copy of <em>Mockingbird</em> and wrote the CL module, as I didn't see one in the Haskell <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/\">standard library</a>.  It went surprisingly quickly and easily.  There were a few snags, Prolog, being dynamically-typed, allowed me to define the reoccuring combinators of <code>L</code>, <code>M</code>, and <code>U</code> (definitions of the combinators are available in <a href=\"http://www.cotilliongroup.com/man/combinators-man.html\">my combinator library</a> or <a href=\"http://www.angelfire.com/tx4/cus/combinator/birds.html\">tabled form</a> or <a href=\"http://users.bigpond.net.au/d.keenan/Lambda/\">as graphical notation</a> (which includes a very nice write up of propositional logic in CL)), but Haskell's type system complains of an occur-check error.  I have the hack to define the <code>Y</code> combinator ...<br /><blockquote><code>fix f = <kbd>let</kbd> x = f x <kbd>in</kbd> x</code></blockquote><br />... but I'm having difficulty hacking the other self-applying combinators; any suggestions on how to implement those?  I'm particularly interested in implementing Turings' universal combinator ...<br /><blockquote><code>Uxy = y(xxy)</code></blockquote><br />... because of its interesting properties I'd like to explore.<br /><br />Anyway, here's the ones I do have.<br /><br /><code>> <kbd>module</kbd> <tt>Smullyan</tt> <kbd>where</kbd></code><br /><br />It was pointed out to me in the comments that if you make the ((->) a) type a Monad, then some of the combinators simplify to monadic operators.<br /><br /><pre>> <kbd>import</kbd> <tt>Monad</tt><br />> <kbd>import</kbd> <tt>Control.Monad.Instances</tt></pre><br />These are some of the combinators presented in Smullyan's <em>To Mock a Mockingbird</em>.  Some have direct Haskell equivalents, e.g.: <code>I</code> &equiv; <kbd>id</kbd>, <code>K</code> &equiv; <kbd>const</kbd>, <code>C</code> &equiv; <kbd>flip</kbd>, <code>B</code> &equiv; <code>(.)</code>, but then that just makes my job easier here.  I also admit a preference to the Sch&ouml;nfinkel combinators over the renamed Haskell equivalents, so here is the library.<br /><br />We will not be defining combinators here that cause an occurs-check of the type system, e.g. <code>L</code>, <code>M</code>, <code>U</code>, but we can define some interesting ones, such as <code>O</code> and <code>Y</code> by using work-arounds.<br /><br />If we wish to start with &lambda;<sub>I</sub>, then its basis is formed from the <code>J</code> and <code>I</code> combinators.<br /><pre>> -- identity (I have no idea to which species belongs the 'identity' bird)<br />> i :: a -> a<br />> i = <kbd>id</kbd><br /><br />> -- jay: jabcd = ab(adc)<br />> j :: (a -> b -> b) -> a -> b -> a -> b<br />> j a b c d = a b (a d c)</pre><br />I actually spent quite a stretch of time building the other combinators from the JI-basis, e.g., the <code>T</code> combinator is <code>JII</code>, the <code>Q<sub>1</sub></code> combinator is <code>JI</code>, etc.  When I attempted to define the <code>K</code> combinator, I ran into a brick wall for some time, until I reread the section in <em>Mockingbird</em> about how the noble basis has no way to define that abhorred combinator.  Since that time I've fallen from grace and have used &lambda;<sub>K</sub>, but I've always wondered since if a complete logic could be reasonably expressed in &lambda;<sub>I</sub>, and if so, how would that logic be implemented?  I haven't come across any papers that address these questions.<br /><br />Musing again, let's define the basis of &lambda;<sub>K</sub> which is founded on the <code>S</code> and <code>K</code> combinators.<br /><pre>> -- starling: sfgx = fx(gx)<br />> s :: <tt>Monad</tt> m &rArr; m (a &rarr; b) &rarr; m a &rarr; m b<br />> s = ap<br /><br />> -- kestrel: kab = a<br />> k :: a -> b -> a<br />> k = <kbd>const</kbd></pre><br />... okay, that wasn't too hard, so, <code>SKK</code> should be <code>I</code>, right?<br /><br /><code> --- :t (s k k) :: a -> a</code> ... oh, yeah!<br /><br />let's continue with some of the other combinators:<br /><pre>> -- bluebird: bfgx = f(gx)<br />> b :: (b -> c) -> (a -> b) -> a -> c<br />> b = (.)<br /><br />> -- cardinal: cfgx = gfx<br />> c :: (a -> b -> c) -> b -> a -> c<br />> c = <kbd>flip</kbd></pre><br />Now we start defining combinators in terms of simpler combinators.  Although, we could have started doing that once we've defined <code>S</code> and <code>K</code>, as all other combinators can be derived from those two.<br /><pre>> -- dove: dfghx = fg(hx)<br />> d :: (d -> b -> c) -> d -> (a -> b) -> a -> c<br />> d = b b<br /><br />> -- thrush: txf = fx<br />> t :: a -> (a -> b) -> b<br />> t = c i<br /><br />> -- vireo (pairing/list): vabf = fab<br />> -- e.g. v 1 [2] (:) -> [1,2]<br />> v :: a -> b -> (a -> b -> b) -> b<br />> v = b c t<br /><br />> -- robin: rxfy = fyx<br />> r :: a -> (b -> a -> c) -> b -> c<br />> r = b b t<br /><br />> -- owl: ofg = g(fg)<br />> o :: ((a -> b) -> a) -> (a -> b) -> b<br />> o = s i<br /><br />> -- queer: qfgx = g(fx)<br />> q :: (a -> b) -> (b -> c) -> a -> c<br />> q = c b</pre><br />-- mockingbird: mf = ff<br />m = s i i<br /><br />... ah, well, it was worth a try ...<br /><pre>> -- warbler: wfx = fxx<br />> w :: <tt>Monad</tt> m &rArr; m (m a) &rarr; m a<br />> w = join<br /><br />> -- eagle: eabcde = ab(cde)<br />> e :: (a -> b -> c) -> a -> (d -> e -> b) -> d -> e -> c<br />> e = b (b b b)</pre><br />With the above definitions, we can now type-check that my <code>JI</code>-basis is correct: the type of <code>I</code> already checks, and the type of <code>J</code> should be equivalent to <code>B(BC)(W(BCE)))</code>, ... <br /><pre>:t (b (b c) (w (b c e)))<br />(b (b c) (w (b c e))) :: (d -> e -> e) -> d -> e -> d -> e</pre><br />and it is ... yay!<br /><br />-- lark (ascending): lfg = f(gg)<br />l = ((s ((s (k s)) k)) (k (s i i)))<br /><br />l :: (a -> b) -> (c -> a) -> b<br />a b = a (b b)<br /><br />... ah, well, another one bites the dust ...<br /><br />but we can define <code>Y</code>, albeit with a let-trick, thanks to Dirk Thierbach, responding to the thread \"State Monad Style\" on comp.lang.haskell:<br /><pre>> fix :: (a -> a) -> a<br />> fix f = <kbd>let</kbd> x = f x <kbd>in</kbd> x<br /><br />> -- sage/why: yf = f(yf)<br />> y :: (a -> a) -> a<br />> y = fix</pre><br />So, there you go, 15 combinators to get you started; now you can program a functionally pure and mathematically sound version of Unlambda (which exists and is called <a href=\"http://homepages.cwi.nl/~tromp/cl/lazy-k.html\">Lazy-K</a>, by the way) using your very own Haskell system.<br /><br />After all, why should someone ever be forced to write <code>\\x -> x^2</code> when they have the option, and privilege, to write <code>w (*)</code> instead?", homepage = "http://logicaltypes.blogspot.com/2008/08/combinators-in-haskell.html", isRead = True},RssItem {title = "Andr\195\169 Pang (ozone): Mac Developer Roundtable #11", content = "<p>The <a href=\"http://www.mac-developer-network.com/\">Mac Developer Network</a> features an excellent series of <a href=\"http://www.mac-developer-network.com/podcasts/\">podcasts</a> aimed at both veteran Mac developers and those new to the platform who are interested in developing for the Mac.  If you&#8217;re a current Mac coder and haven&#8217;t seen them yet, be sure to check them out.  I&#8217;ve been listening to the podcasts for a long time, and they&#8217;re always both informative and entertaining.  (Infotainment, baby.)</p>\n\n<p>Well, in yet another case of &#8220;Wow, do I really sound like that?&#8221;, I became a guest on <a href=\"http://www.mac-developer-network.com/podcasts/macdeveloperroundtable/episode11/index.html\">The Mac Developer Roundtable episode #11</a>, along with Marcus Zarra, Jonathan Dann, Bill Dudney, and our always-eloquent and delightfully British host, Scotty.  The primary topic was Xcode 3.1, but we also chatted about the iPhone <span class=\"caps\">NDA </span>(c&#8217;mon Apple, lift it already!) and&#8230; Fortran.  I think I even managed to sneak in the words &#8220;Haskell&#8221; and &#8220;Visual Studio&#8221; in there, which no doubt left the other show guests questioning my sanity.  I do look forward to Fortran support in Xcode 4.0.</p>\n\n<p>It was actually a small miracle that I managed to be on the show at all.  Not only was the podcast recording scheduled at the ungodly time of 4am on a Saturday morning in Australian east-coast time, but I was also in transit from Sydney to the amazing alpine village of <a href=\"http://www.dinner-plain.com/\">Dinner Plain</a> the day before the recording took place.  While Dinner Plain is a truly extraordinary village that boasts <a href=\"http://images.google.com/images?q=dinner+plain+photos\">magnificent ski lodges</a> and some of the <a href=\"http://www.cilantro.com.au/menu_new.html\">best</a> <a href=\"http://www.yourrestaurants.com.au/guide/?action=venue&amp;venue_url=tsubo\">restaurants</a> I&#8217;ve ever had the pleasure of eating at, it&#8217;s also rather&#8230; rural.  The resident population is somewhere around 100, the supermarket doesn&#8217;t even sell a wine bottle opener that doesn&#8217;t suck, and Vodafone has zero phone reception there.  So, it was to my great surprise that I could get <span class=\"caps\">ADSL </span>hooked up to the lodge there, which was done an entire two days before the recording.  Of course, since no <span class=\"caps\">ADSL </span>installation ever goes smoothly, I was on the phone to iPrimus tech support<sup class=\"footnote\"><a href=\"http://www.algorithm.com.au/blog/files/rss.xml#fn1\">1</a></sup> at 10pm on Friday night, 6 hours before the recording was due to start.  All that effort for the privilege of being able to drag my sleepy ass out of bed a few hours later, for the joy of talking to other Mac geeks about our beloved profession.  But, I gotta say, being able to hold an international conference call over the Intertubes from a tiny little village at 4am in the morning, when snow is falling all around you&#8230; I do love technology.</p>\n\n<p>Of course, since I haven&#8217;t actually listened to the episode yet, maybe it&#8217;s all a load of bollocks and I sound like a retarded hobbit on speed.  Hopefully not, though.  Enjoy!</p>\n\n<p class=\"footnote\" id=\"fn1\"><sup>1</sup> Hey, I like Internode and Westnet as much as every other Australian tech geeks, but they didn&#8217;t service that area, unfortunately.</p>", homepage = "http://www.algorithm.com.au/blog/files/mac-developer-roundtable-11.php#unique-entry-id-592", isRead = True},RssItem {title = "Holumbus: Search Packages", content = "<p>We have added package information to Hayoo!, which results in two major changes: The result list includes the names of the respective packages the functions belong to and searching for packages is also possible.</p>\n<p>For example, a search can now be easily restricted to a specific package by just including the package name in the query. A search for &#8220;map base&#8221; will prefer results from the base package.</p>\n<p>As always, comments are highly appreciated!</p>", homepage = "http://holumbus.fh-wedel.de/blog/?p=14", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): How do I get better?", content = "I just fielded a question from a programmer who wishes to improve his (Haskell) programming skill, and I responded with a reading list (below) and a referral to the <a href=\"http://projecteuler.net\">Project Euler problems site</a>.  But I also see this as an excellent question for myself.  How do you, genteel reader, recommend I improve my skill as a coder?  Or, put another way, what book, or books, and which article, or articles, so totally transformed you from J. Random Hacker to J. &Uuml;ber Hacker (hacker being coder, or mathematician, or logician, or rule developer, or ...)?<br /><br />My list is as follows.  Would you kindly tell me what I need to read right now so I can see the light as you have?<br /><br /><u><strong>Books for learning</strong></u>:<br /><br />The Art of the Metaobject Protocol, Moon, et al<br />To Mock a Mockingbird, Smullyan<br />Reasoned Schemer, Bird, et al<br />Algorithms, a Functional Approach, Rabhi, LaPalme<br />Genetic Algorithms, Goldberg<br />How to Solve it, Modern Heuristics, Michalewicz/Fogel<br />Godel, Escher, Bach, an Eternal Golden Braid, Hofstadter<br />Prolog Programming for AI, Bratko<br />(and, after a year of programming in Prolog), Craft of Prolog, O'Keefe<br />A Grammatical View of Logic Programming, Deransart/Maluszynski<br />An Introduction to Mathematical Philosophy, Russell<br /><br /><u><strong>Books for Joy</strong></u>:<br /><br />Testaments Betrayed, Kundera<br />Last Samurai, DeWitt<br />Lord of Light, Zelzany<br />American Gods, Gaiman<br />Complete Enchanter, de Camp<br />Moor's Last Sigh, Rushdie<br /><br /><u><strong>Noosphere</strong></u>:<br /><br /><a href=\"http://users.bigpond.net.au/d.keenan/Lambda/\">\"To Dissect a Mockingbird\"</a> article, Keenan<br /><a href=\"http://library.readscheme.org/page1.html\">The lambda papers</a>, Steele/Sussman<br /><a href=\"http://homepages.inf.ed.ac.uk/wadler/documents/steele-oopsla98.pdf\">Growing a language</a> article, Guy Steele<br /><a href=\"http://www.ai-junkie.com/ann/evolved/nnt1.html\">AI Junkie</a> site<br /><a href=\"http://sigfpe.blogspot.com/\">sigfpe.blogspot.com</a> blog<br /><a href=\"http://www.randomhacks.net/\">randomhacks.net</a> blog<br />the <a href=\"http://haskell.org/haskellwiki/The_Monad.Reader\">Monad.Reader</a> (on haskell.org)<br /><a href=\"http://comonad.com/reader/\">Comonad.Reader</a> blog<br />\"<a href=\"http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/MONADS/Noel/research/monads.html\">What the Hell are Monads?</a>\" article, Winstanley<br />\"<a href=\"http://uebb.cs.tu-berlin.de/~magr/pub/Transformers.en.html\">Monad Transformers, Step by Step</a>\" article, Grabmueller<br />\"<a href=\"http://haskell.org/arrows/\">Generalising Monads to Arrows</a>\", Hughes<br />\"<a href=\"http://en.wikibooks.org/wiki/Haskell/Zippers\">Theseus and the Zipper</a>\", on the Haskell Wiki<br />\"<a href=\"http://web.engr.oregonstate.edu/~erwig/zurg/\">Escape from Zurg: Exercise in Logic Programming</a>\",  Erwig<br />And for language construction/deconstruction: <a href=\"http://homepages.cwi.nl/~tromp/cl/lazy-k.html\">Lazy K, Jot, Iota</a> and <a href=\"http://www.bigzaphod.org/whirl/\">Whirl</a> (well, at least they aren't INTERCAL ...), ... I suppose <a href=\"http://www.muppetlabs.com/~breadbox/bf/\">brainf**k</a> should be mentioned here too ...<br />\"The tale of N-categories\" serial, starting with <a href=\"http://math.ucr.edu/home/baez/week73.html\">week 73</a>, Baez", homepage = "http://logicaltypes.blogspot.com/2008/08/how-do-i-get-better.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Apologies for late Spring cleaning", content = "It was pointed out to me that the colour cyan is difficult to read against a white background; my syntax highlighter outputs Haskell keywords as cyan, so I understand that reading the code here can be bothersome.  So, I'm in the process of converting the cyan to a darker colour (which first involved me converting every &lt;font color='cyan'> to &lt;font color='#00c8c8'>, but then, part way through that process, I moved all font metadata to the stylesheet and now simply mark code, keywords and data types with appropriate metadata tags).<br /><br />A bit of a long-winded apology for what you may see as several (and repeated) repostings from this blog.", homepage = "http://logicaltypes.blogspot.com/2008/08/apologies-for-late-spring-cleaning.html", isRead = True},RssItem {title = "Audrey Tang: Short notes on migrating a SVK mirror to Git.", content = "<p>While <em>mugwump++</em>'s <a href=\"http://utsl.gen.nz/talks/git-svn/intro.html\">notes</a> are concise enough, see below for an even more concise version suitable to save as a shell script: </p>\n<blockquote><pre>mkdir pugs<br />cd pugs<br />git svn init --use-svm-props \\<br />&nbsp; &nbsp; file://$HOME/.svk/local/mirror/pugs<br />git svn fetch<br />rm -rf .git/svn .git/config<br />git svn init http://svn.pugscode.org/pugs<br />git svn fetch<br />git repack -a -d -f --window 100</pre></blockquote>\n<p>\nAlso here are a couple of useful aliases:<br />\n\n</p><blockquote><pre>alias pull='git svn rebase'<br />alias push='git svn dcommit'</pre></blockquote><p>Note that I still think SVK is a great revision control system -- to me, its <a href=\"http://commons.wikimedia.org/wiki/Image:Svk-overview.png\">design</a> strikes a fine balance between practicality and elegance.</p>\n\n<p>However, with a 300MiB+ repository (51MiB under Git) and 20000+ revisions, the N in <em>O(N)</em> vs <em>O(log N)</em> is large enough for common operations to matter... :-)</p>", homepage = "http://pugs.blogs.com/pugs/2008/08/short-notes-on.html", isRead = True},RssItem {title = "Neil Mitchell: GSoC Hoogle: Week 10", content = "This week I've been in Bristol, and am just about to head off to the <a href=\"http://www.bristol.gov.uk/ccm/content/Leisure-Culture/Arts-Entertainment/edf-energy-bristol-harbour-festival-2007.en\">Harbour Festival</a>. Next week I'm heading off to <a href=\"http://www.haskell.org/haskellwiki/AngloHaskell/2008\">AngloHaskell 2008</a>, and will be talking about Hoogle type searching on the Saturday.<br /><br />This week has been type search, yet again. There were issues with algorithmic complexity, combinatorial explosions and other fun stuff. However, its now finished. The type search is now fast enough (you can run Hoogle in Hugs against the core libraries) and gives good results. Rather than describe type searching, its easier to give an example. Searching for <tt>(a -> b) -> [a] -> [b]</tt> in Hoogle 3 gives:<br /><br /><pre><br />Prelude.map :: (a -> b) -> [a] -> [b]<br />Data.List.map :: (a -> b) -> [a] -> [b]<br />Control.Parallel.S... parMap :: Strategy b -> (a -> b) -> [a] -> [b]<br />Prelude.scanr :: (a -> b -> b) -> b -> [a] -> [b]<br />Data.List.scanr :: (a -> b -> b) -> b -> [a] -> [b]<br />Prelude.scanl :: (a -> b -> a) -> a -> [b] -> [a]<br />Data.List.scanl :: (a -> b -> a) -> a -> [b] -> [a]<br />Prelude.concatMap :: (a -> [b]) -> [a] -> [b]<br /></pre><br /><br />But in Hoogle 4 gives:<br /><br /><pre><br />Prelude map :: (a -> b) -> [a] -> [b]<br />Data.List map :: (a -> b) -> [a] -> [b]<br />Prelude fmap :: Functor f => (a -> b) -> f a -> f b<br />Control.Applicative $> :: Functor f => (a -> b) -> f a -> f b<br />Control.Monad fmap :: Functor f => (a -> b) -> f a -> f b<br />Control.Monad.Instances fmap :: Functor f => (a -> b) -> f a -> f b<br />Control.Applicative liftA :: Applicative f => (a -> b) -> f a -> f b<br />Data.Traversable fmapDefault :: Traversable t => (a -> b) -> t a -> t b<br />Control.Monad liftM :: Monad m => (a1 -> r) -> m a1 -> m r<br />Control.Parallel.Strategies parMap :: Strategy b -> (a -> b) -> [a] -> [b]<br /></pre><br /><br />I think the new results are better. For more details, come to the AngloHaskell talk.<br /><br /><b>Next Week:</b> I want to release a public beta of Hoogle 4 in command line form. I want to start on the web search engine and tweak the ranking algorithm. I'll also be writing up type search in the form of a presentation.<br /><br /><b>User Visible Changes:</b> Type search works well and fast.", homepage = "http://neilmitchell.blogspot.com/2008/08/gsoc-hoogle-week-10.html", isRead = True},RssItem {title = "Paul Johnson: The Netwise Kids of Today", content = "My son is keen on Habbo (a virtual world ostensibly aimed at teenagers, but probably attracting a lot of pre-teen kids), and spends quite a bit of his pocket money on it.  We regard Habbo as a cynical method of separating kids from their money.  Lack of credit cards isn't a problem as you can buy Habbo credits using a mobile phone.  However we also regard that \"I've just blown all my money on", homepage = "http://paulspontifications.blogspot.com/2008/08/netwise-kids-of-today.html", isRead = True},RssItem {title = "Jonathan Tang: The pitfalls of multimethods", content = "I'm usually reluctant to write a blog post without checking in any code, since it's a bad habit to get into.  But the last entry resulted in a lot of good feedback, much of which indicated the feature wasn't necessary at all.  That's about the best outcome that could be hoped for - the fewer the features, the better the language.  But it's better if I decide to cut the features before I write them. ;-)<br /><br />The existing interpreter already has multimethods - sorta.  But the method lookup algorithm is basically a mess.  Here're some of the pitfalls I've run into.  If I decide to nix the feature entirely, at least I'll have a paper trail of why it didn't work so I don't make the same mistakes later.<br /><br /><span>Basics of Multimethods</span><br /><br />Some basic background for those who aren't familiar with multimethods.  In \"normal\" OO languages, methods are bound to instances - you get polymorphism by changing the type of the instance.  With multimethods, methods are instead bound to generic functions, which then dispatch to a particular implementation based on the type of <span>all</span> arguments.  So instead of just specializing on the first argument (the message receiver), you can specialize on any combination of arguments.<br /><br />An example:<br /><br />Eve's subscript notation is syntactic sugar for a \"get\" method call.  Instead of having separate concepts of slicing, indexing, and iterations, the following examples all invoke the same method:<br /><pre><br />sequence[0] => get(sequence, 0)   # Indexing<br />sequence[1..5] => get(sequence, Range(1, 5))  # Slicing<br />sequence[[1, 4, 5, 9]] => get(sequence, [1, 4, 5, 9]) # Retrieve specific indices<br />sequence[] => get(sequence)   # Iterator query<br /></pre><br />Since sequence can itself be any object that conforms to the sequence type, this dispatches on the type of both arguments.  Oftentimes, there's some specific linearization algorithm that determines the order in which methods are tried.  Eve's current interpreter uses simple textual order - more recently defined variables are tried first, then others if they raise a TypeError.  This is a complete mess, though - among other things, it means that the textual order of the file matters, and that the order of <span>imports</span> can create subtle differences in which method is called.  One of the sections in this blog entry will about method linearization order.<br /><br />And now the pitfalls:<br /><br /><span>Closures</span><br /><br />Ideally, generic functions should be first-class values just like anything else.  But what happens in the presence of lexical scoping?  Say that you have a generic function 'add' that's defined over numbers and their subclasses, so that you can add two ints or two floats or two vectors or two matrices.  Then you try to define this function:<br /><pre><br />def foo(num1 as Int, number_like_but_some_funky_subtype):<br />   def add(num1 as Int, num2 as FunkySubtype):<br />       # whatever<br />   add(num1, number_like_but_some_funky_subtype)<br /></pre><br />Should the new definition of 'add' define a new method on the existing generic function, letting you pass normal numbers into 'foo' in addition to FunkySubtypes?  Should the new method be visible outside the definition of 'foo', even though it was declared as lexically scoped?  Or should the definition shadow the generic function, so that 'add' is only a regular function that can't be used with normal numbers?<br /><br />To my knowledge, the only language that's dealt with this issue is CLOS.  AFAIK (correct me if I'm wrong), it adds a new method to the existing generic function, which is then visible globally.  But this is a gross violation of encapsulation - you wouldn't expect that defining a local closure could change the behavior of the program at a faraway call site.<br /><br />The ideal semantics, to me, would have it locally add a new method that applies only within the body of 'foo' - this keeps changes local, yet lets you redefine special cases as necessary.  But then what happens if you bind 'add' to a record field, return it, or pass it to a function?  It seems like it'd be most useful to have it pass the <span>new</span> generic function, including the newly-defined method.  But this means that you have to compute new dispatch rules whenever a multimethod \"escapes\" from a function, so certain operations that look computationally simple could become quite heavyweight.<br /><br />Now what if instead of being defined locally, 'add' was the name of a parameter?  Should the parameter shadow the existing multimethod, or should the definitions be combined together?  What if 'add' doesn't hold a function at all, but instead is just an ordinary value?  What if it does hold a function, but the name collision is accidental?<br /><br />I'm inclined to make defs the <span>only</span> way to add methods to a generic function, for this reason.  Too easy to accidentally create terrible messes.  Also, usually if you bind a variable, you want that variable to mean *only* what you've bound it to, and not that plus whatever else happens to be in the environment.<br /><br /><span>Module system</span><br /><br />Since implementations end up bound to the generic function, there's a problem when integrating multimethods with module systems.  How do you tell which implementations should be visible at the call site?<br /><br />For example, what if some client code looked like this:<br /><pre><br />def first_two(sequence): [sequence[0], sequence[1]]<br /></pre><br />The intent is for first_two to work with any sort of sequence, but this requires that the <span>all</span> implementations of 'get', everywhere within the program, be visible.  Okay, we can do that - as long as we're dealing with a known variable.  Now what if, instead of 'get', we were calling a function (possibly a multimethod) that had been passed in from elsewhere?  I guess it would be up to the caller to package up whatever dispatching was necessary to determine which method is most applicable.<br /><br />Now what if you didn't <span>want</span> to call any matching method in any module?  After all, the point of a module system is to hide unrelated names from each other - if you break that down, you risk some very odd name-collision bugs, akin to the mess that comes from using Prototype.js or Mootools or monkey-patching things in Ruby.<br /><br />Ultimately, the problem here seems to be that you <span>want</span> to import associated methods, when they match your intended use, and yet you <span>don't</span> want to import unrelated methods that have the same name but completely different semantics.  In other words, you want the computer to be a mind-reader.<br /><br />To my knowledge, the only language that's thought seriously about these issues is Cecil.  They use the concept of <a href=\"http://citeseer.ist.psu.edu/article/chambers94typechecking.html\">Extension Modules</a>: whenever a module defines a class and methods that subclass an existing method, the module is defined as an \"extension module\" to the module which contains the original signature.  When the original interface is imported, all extension modules are implicitly imported as well.<br /><br />This has the following problems when transferred to Eve:<br /><ol><li>It relies on nominal subtyping; Eve has structural subtyping.  For example, a Range in Eve is a subtype of a sequence, and has all the normal sequence methods defined.  However, anything with 'start' and 'stop' integer fields is a subtype of Range, and should also get the sequence methods \"for free\".  How would a module elsewhere that defines { start as Int, stop as Int } types know that it should be an extension module of Range?  Does it have to search every installed module for ones with compatible signatures?</li><li>It doesn't interact well with first-class generic functions.  If GFs are first-class, you might pass them into modules that don't import the original function.  How do you handle the extension modules then?  The receiver isn't even importing the signature module, let alone the extension modules.</li></ol>One of the goals of these two language features - structural subtyping and first-class functions - is so that client code shouldn't need to know about unnecessary things.  For example, it's a big pain in Java when you have a class that really <span>should</span> be a Swing TableModel or TreeModel, yet you don't want to couple it to Swing.  Or in the financial industry, I had plenty of cases where I wanted to write code that would work with any \"Trade-like\" object, where a trade-like object is anything with a price, a volume, and a time.  I didn't want to make these trade-like objects aware of the particular algorithms that would be manipulating them, so having them implement a common interface was out of the question.  Instead, I want to put the fact that ClassA implements InterfaceB in a third module, so that A and B are themselves independent.<br /><br /><span>Method Dispatch</span><br /><br />Then there are problems in resolving method priority.  With single-dispatch &amp; single-inheritance, the subtype relationship has a partial order, and so you can just use that order for method dispatch.  With single dispatch &amp; multiple inheritance, you don't necessarily have a partial order, but the language usually forbids any class hierarchy that leads to cycles in the inheritance graph.  But with multiple dispatch, you may have a different ordering for each parameter, and the orderings may conflict in ways that are not detectable to the compiler.  Worse, two modules that are correct in isolation may result in conflicts when combined.<br /><br />For example, say you have the following type relationship:<br /><pre><br />type A<br />type B subtypes A<br />type X<br />type Y subtypes X<br /><br />def foo(a as A, x as X): ...<br />def foo(a as A, x as Y): ...<br />def foo(a as B, x as X): ...<br /></pre><br />If you call foo with a B and a Y, which method should be called?  The existing Eve interpreter tries methods in textual order (actually, reverse textual order owing to an interpreter quirk), much like how pattern-matching works in Haskell/Erlang/Ocaml.  So the first variant gets called.<br /><br />Usually, this is what you want - the point of subtyping is to provide a <span>specialization, </span>and so specialized methods should take precedence over textual order.  But there're two different possible specializations here.  You could take the second definition, which is more specific in the second argument, or the third definition, which is more specific in the first argument.<br /><br />CLOS and Dylan, I believe, do the latter, preferencing argument positions in left-to-right order.  This keeps behavior well-defined, but can sometimes lead to confusing mistakes.<br /><br />Cecil raises an error in situations like this, where the specificity is ambiguous.  But this can a problem when importing hierarchies from two different modules.  The parameters to 'foo' may have come from anywhere; by adding a new module with new subtypes, you risk making the call to 'foo' ambiguous (and hence incorrect) even though each individual subtype is correct in isolation.<br /><br /><span>Keyword and varargs</span><br /><br />The left-to-right ordering creates an additional problem with keyword arguments.  Python has a nice feature (not yet implemented in Eve, but it'd be cool) where you can supply any positional argument as a keyword argument and take it out of the order.  But what should the specificity rules be for keyword arguments then?  Two different calls might have different precedence rules based on the order in which they supplied keyword arguments, yet the whole point of keywords is that order doesn't matter.<br /><br />One possible resolution would be to just not implement keyword arguments.  For most usages, passing in a literal record or dict is just as effective, and doesn't raise problems like this (plus, keyword arguments can have similar issues with first-class functions, where you need the internal parameter names to match up in addition to their positions).  But it's yet another complicating factor for multimethods.<br /><br /><span>Conclusion</span>:<br /><br />I'm leaning towards just dropping multimethods from the design.  The vast majority of practical applications do not need multimethods - after all, people do just fine with Python and Java.  For the opening example with subscripting, I could just have separate methods for get/slice/restrict.  That'd just sidestep the problem, and probably get most of the functionality I need.<br /><br />Another question this opens up is what to use for regular single-dispatch in the absence of multiple dispatch, since I was depending quite a bit on it.  One possibility is to bring back the . as syntax, and use it like in Python, to bind methods to objects:<br /><pre><br />   # Existing pipelining calls<br />   obj -> method          # record access, same as method(obj)<br />   obj -> method1 -> method2 # method2(method1(obj))<br />   obj -> method(?, arg)  # partial app, same as {| x | method(x, arg)}(obj)<br /><br />   # New bound method calls<br />   obj.method             # bound method, same as {| *args | method(obj, *args) }<br />   obj.method(arg)        # method invocation, same as (obj->method)(obj, arg)<br /></pre><br /><br />Then perhaps have some syntactic sugar for defining classes, which are basically records of functions.<br /><br />This is simple and well-tested: the one thing I'm not sure about is how it interacts with the equivalency between record fields and local function calls.  I really like this equivalency; among other things, it lets you prototype with explicit data fields, and then switch to a computed representation later.  It looks like it works okay here too, except that we should provide some sort of 'bind' operator so that given a record { field1, field2 } and a method method1, we have bind(record, 'method1') = { field1, field2, method1 }.  I could also see this being very useful for eg. template variables or other quick prototyping.", homepage = "http://eve-language.blogspot.com/2008/08/pitfalls-of-multimethods.html", isRead = True},RssItem {title = "Dan Piponi (sigfpe): Hopf Algebra = Group + Monad", content = "I have two goals in this post. Firstly I want to revisit the vector space monad I've used <a href=\"http://sigfpe.blogspot.com/2007/03/monads-vector-spaces-and-quantum.html\">before</a>. This time I want to show how it provides a great domain specific language for working with multilinear functions on vector spaces. Secondly I want to apply this monad to talk about <a href=\"http://en.wikipedia.org/wiki/Hopf_algebra\">Hopf algebras</a>. In particular I want to address the issue of why <a href=\"http://www.youtube.com/watch?v=p3kkm5dYH-w\">Hopf algebras</a> and <a href=\"http://sbseminar.wordpress.com/2007/10/07/group-hopf-algebra/\">groups</a> are actually the same thing. In fact, I want to push this idea to the point where I can use exactly the same code to perform operations in both groups and Hopf algebras. By parameterising the definition of groups in the right way, Hopf algebras appear as if by magic simply by tweaking one parameter. What this means is that if you understand groups and vector spaces, and are comfortable with monads in Haskell, then despite their notoriety as something whose definition is a little opaque, you'll have some idea of what a Hopf algebra is well before the end this post.<br /><br />Of course there's the question of why anyone would want to know about Hopf algebras. They appear in combinatorics, topology and knot theory, and theoretical physics among other subjects. In fact, there's a <a href=\"http://arxiv.org/pdf/math/0411536\">review paper</a> on their ubiquity. As topics in mathematics go, this is a hot one.<br /><br />First some administrivia, because this is, as always, a literate Haskell post.<br /><br /><pre><br />&gt; {-# LANGUAGE MultiParamTypeClasses,FlexibleInstances,FunctionalDependencies,GeneralizedNewtypeDeriving #-}<br /><br />&gt; module Main where<br /><br />&gt; import qualified Data.Map as M<br />&gt; import Control.Monad<br />&gt; import Test.QuickCheck<br /><br />&gt; infixl 5 .+<br />&gt; infixl 6 .*<br /><br />&gt; swap (x,y) = (y,x)<br /><br /></pre><br /><h3>Vector Spaces</h3><br /><br />We'll start with a type class for vector spaces v over a base field k:<br /><br /><pre><br />&gt; class Num k =&gt; VectorSpace k v | v -&gt; k where<br />&gt;     zero :: v<br />&gt;     (.+) :: v -&gt; v -&gt; v<br />&gt;     (.*) :: k -&gt; v -&gt; v<br />&gt;     (.-) :: v -&gt; v -&gt; v<br />&gt;     v1 .- v2 = v1 .+ ((-1).*v2)<br /><br /></pre><br /><tt>.+</tt> is vector space addition and <tt>.*</tt> is scalar multiplication by elements of the base field.<br /><br />And now I need a concrete instance. I'll be working with vector spaces equipped with a basis. I'll use the obvious representation: a list of pairs of coefficients and basis elements. So 2x-3y is represented as <tt>V [(2,x),(3,y)]</tt>. Sometimes it will be clearer if I write 2e<sub>x</sub>-3e<sub>y</sub>. x and y aren't really the basis elements but labels. The e<sub>x</sub> and e<sub>y</sub> are the actual basis elements. But it's often more readable to write x and y.<br /><br /><pre><br />&gt; data V k a = V { unV :: [(k,a)] } deriving (Show)<br /><br /></pre><br />The problem with this representation is that basis elements might appear in any order, the same basis element might appear multiple times, and some basis elements might appear with redundant zero coefficients. We need a suitable definition of equality. (I'm sidestepping the <a href=\"http://www.randomhacks.net/articles/2007/03/15/data-set-monad-haskell-macros\">usual issues</a> with <tt>Eq</tt> and <tt>Monad</tt>.)<br /><br /><pre><br />&gt; reduce x = filter ((/=0) . fst) $ fmap swap $ M.toList $ M.fromListWith (+) $ fmap swap $ x<br /><br />&gt; instance (Ord a,Num k) =&gt; Eq (V k a) where<br />&gt;   V x==V y = reduce x==reduce y<br /><br />&gt; instance (Ord a,Num k,Ord k) =&gt; Ord (V k a) where<br />&gt;   compare (V x) (V y) = compare (reduce x) (reduce y)<br /><br /></pre><br />V is a functor. fmap f just applies f to the basis elements.<br /><br /><pre><br />&gt; instance Num k =&gt; Functor (V k) where<br />&gt;     fmap f (V as) = V $ map (\\(k,a) -&gt; (k,f a)) as<br /><br /></pre><br />Given any type a, V k a is the type of vectors over k generated by elements of a. So <tt>V k (V k a)</tt> is the type of vectors whose basis elements are themselves labeled by vectors in <tt>V k a</tt>. We can think of an element of <tt>V k (V k a)</tt> looking something like 2(2x+3y)-5(3x-y). It's tempting to say this is equal to what we get when we multiply out, but where I wrote '2x+3y' I really meant e<sub>2x+3y</sub>. Nonetheless, we can define a function that does the multiplying out. I'll call this function <tt>join</tt>. So we get a function <tt>join :: V k (V k a) -&gt; V k a</tt>. In fact, we get a monad.<br /><br /><pre><br />&gt; instance Num k =&gt; Monad (V k) where<br />&gt;     return a = V [(1,a)]<br />&gt;     x &gt;&gt;= f = join (fmap f x)<br />&gt;         where join x = V $ concat $ fmap (uncurry scale) $ unV $ fmap unV x<br />&gt;               scale k1 as = map (\\(k2,a) -&gt; (k1*k2,a)) as<br /><br /></pre><br />What's really going on here is that the \"vector space over basis\" functor is a monad in the category Set, but in the category of Haskell types and functions we're stuck with lists.<br /><br /><tt>V k</tt> is not just a monad, it's also a <tt>MonadPlus</tt>.<br /><br /><pre><br />&gt; instance Num r =&gt; MonadPlus (V r) where<br />&gt;     mzero = V []<br />&gt;     mplus (V x) (V y) = V (x++y)<br /><br /></pre><br />So what's the use of making our vector space into a monad? If m is a monad, then any function f:a&rarr;mb can be lifted to a function f':ma&rarr;mb. f maps the basis elements in a to elements of mb. It's a standard fact about vector spaces that a linear function is completely defined by its value on a basis. f' is the corresponding linear function. So we only need to implement linear functions for basis elements and the function can be automatically lifted to a linear function on the whole vector space. An arrow of the form a&rarr;mb is a Kleisli arrow and what I've just argued is that the <a href=\"http://en.wikipedia.org/wiki/Monad_%28category_theory%29#Algebras_for_a_monad\">Kleisli category</a> of the <tt>V k</tt> monad is the category of vector spaces with basis.<br /><br />This gives us lots of advantages. For example, we can't accidentally implement a function that isn't linear this way. If we implement the action on a basis, the lift can't help but be linear. Also, working with basis elements rather than the vector space gives us greater flexibility. For example, it'll be easy to form tensor products of vector spaces by directly working with their bases.<br /><br />Here's the instantiation of the vector space type:<br /><br /><pre><br />&gt; instance (Num k,Ord a) =&gt; VectorSpace k (V k a) where<br />&gt;     zero = V []<br />&gt;     V x .+ V y = V (x ++ y)<br />&gt;     (.*) k = (&gt;&gt;= (\\a -&gt; V [(k,a)]))<br /><br />&gt; e = return :: Num k =&gt; a -&gt; V k a<br />&gt; coefficient b (V bs) = maybe 0 id (lookup b (map swap (reduce bs)))<br /><br /></pre><br />I could have implemented <tt>.*</tt> using <tt>scale</tt> but this definition is more in the spirit of what's to come.<br /><br /><h3>Groups</h3><br /><br />Now we switch to groups. Here's a first attempt at writing a group type class<br /><br /><pre><br />&gt; class Group1 a where<br />&gt;    unit1 :: a<br />&gt;    mult1 :: a -&gt; a -&gt; a<br />&gt;    inverse1 :: a -&gt; a<br /><br />&gt; newtype Z = Z Int deriving (Eq,Ord,Show,Arbitrary,Num)<br /><br />&gt; instance Group1 Z where<br />&gt;    unit1 = Z 0<br />&gt;    mult1 = (+)<br />&gt;    inverse1 = negate<br /><br /></pre><br />Now we can try testing some of the group laws. For example<br /><br /><pre><br />&gt; test_inverse1 a = mult1 a (inverse1 a)<br />&gt; ex1 = quickCheck (\\a -&gt; test_inverse1 a==(unit1::Z))<br /><br /></pre><br />If we run <tt>ex1</tt> we gain some confidence that we have a group. If we want to be more categorial then we need to express as much as possible as compositions of functions. So let's break down <tt>test_inverse1</tt> as a composition of elementary operations.<br /><br /><pre><br />&gt; diag a = (a,a)<br />&gt; both f g (a,b) = (f a,g b)<br />&gt; test_inverse2 = uncurry mult1 . (id `both` inverse1) . diag<br />&gt; ex2 = quickCheck (\\a -&gt; test_inverse2 a==(unit1::Z))<br /><br /></pre><br />There's a nice symmetry in <tt>test_inverse2</tt>. If we make <tt>diag</tt> part of the definition of a group that we can make this highly symmetric definition of a group:<br /><br /><pre><br />&gt; class Group2 a where<br />&gt;     unit2 :: () -&gt; a<br />&gt;     counit2 :: a -&gt; ()<br />&gt;     mult2 :: (a,a) -&gt; a<br />&gt;     comult2 :: a -&gt; (a,a)<br />&gt;     anti2 :: a -&gt; a<br /><br /></pre><br />I've even made a (useless looking) symmetric partner for <tt>unit1</tt> and I've renamed the inverse operation as <tt>anti</tt>, short for antipode. Let's make <tt>Z</tt> an instance of this class.<br /><br /><pre><br />&gt; instance Group2 Z where<br />&gt;   unit2 () = Z 0<br />&gt;   counit2 _ = ()<br />&gt;   mult2 = uncurry (+)<br />&gt;   comult2 a = diag a<br />&gt;   anti2 = negate<br /><br /></pre><br />I hope I haven't done anything too tricky yet. This is just the familiar definition of a group except I've made a trivial 'counit' and the diagonal function part of the definition. Now comes the most important step in this post: I'll tweak this definition so that all of the associated functions are now Kleisli arrows:<br /><br /><pre><br />&gt; class Group m a where<br />&gt;     unit :: () -&gt; m a<br />&gt;     counit :: a -&gt; m ()<br />&gt;     mult :: (a,a) -&gt; m a<br />&gt;     comult :: a -&gt; m (a,a)<br />&gt;     anti :: a -&gt; m a<br /><br /></pre><br />We can now straightforwardly reimplement <tt>Z</tt> as an instance of this class.<br /><br /><pre><br />&gt; instance Monad m =&gt; Group m Z where<br />&gt;     unit _ = return (Z 0)<br />&gt;     counit _ = return ()<br />&gt;     mult = return . uncurry (+)<br />&gt;     comult = return . diag<br />&gt;     anti = return . negate<br /><br /></pre><br />Apart from writing it monad-agnostically, it's just like before. We can exactly recover what we had before with the help of the identitiy monad.<br /><br /><pre><br />&gt; newtype Identity a = I a deriving (Eq,Ord,Show)<br /><br />&gt; instance Monad Identity where<br />&gt;     return x = I x<br />&gt;     I x &gt;&gt;= f = f x<br /><br /></pre><br />Now we can rewrite the group laws. Before checking to see if aa<sup>-1</sup>=1 we'll make sure aa<sup>-1</sup>=a<sup>-1</sup>a.<br /><br /><pre><br />&gt; test_antipode1 a = do<br />&gt;     (u,t) &lt;- comult a<br />&gt;     u' &lt;- anti u<br />&gt;     mult (u',t)<br /><br />&gt; test_antipode2 a = do<br />&gt;     (u,t) &lt;- comult a<br />&gt;     t' &lt;- anti t<br />&gt;     mult (u,t')<br /><br />&gt; ex3 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_antipode1 :: Z -&gt; Identity Z<br />&gt;   rhs = test_antipode2 :: Z -&gt; Identity Z<br /><br /></pre><br />For aa<sup>-1</sup> we need to compare with the identity. We make an identity by applying <tt>unit</tt> to <tt>()</tt>. We could just provide a <tt>()</tt> but we get something more symmetrical if we construct it using the counit.<br /><br /><pre><br />&gt; test_antipode3 a = do<br />&gt;   x &lt;- counit a<br />&gt;   unit x<br /><br />&gt; ex4 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_antipode1 :: Z -&gt; Identity Z<br />&gt;   rhs = test_antipode3 :: Z -&gt; Identity Z<br /><br /></pre><br />We can test associativity easily<br /><br /><pre><br />&gt; test_assoc1 (a,b,c) = do<br />&gt;     ab &lt;- mult (a,b)<br />&gt;     mult (ab,c)<br /><br />&gt; test_assoc2 (a,b,c) = do<br />&gt;     bc &lt;- mult (b,c)<br />&gt;     mult (a,bc)<br /><br />&gt; ex5 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_assoc1 :: (Z,Z,Z) -&gt; Identity Z<br />&gt;   rhs = test_assoc2 :: (Z,Z,Z) -&gt; Identity Z<br /><br /></pre><br />In the interest of symmetry, there ought to be a coassociativity law for comultiplication. Here it is:<br /><br /><pre><br />&gt; test_coassoc1 x = do<br />&gt;     (u,v) &lt;- comult x<br />&gt;     (s,t) &lt;- comult v<br />&gt;     return (u,s,t)<br /><br />&gt; test_coassoc2 x = do<br />&gt;     (u,v) &lt;- comult x<br />&gt;     (s,t) &lt;- comult u<br />&gt;     return (s,t,v)<br /><br />&gt; ex6 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_coassoc1 :: Z -&gt; Identity (Z,Z,Z)<br />&gt;   rhs = test_coassoc2 :: Z -&gt; Identity (Z,Z,Z)<br /><br /></pre><br />One issue is that we've introduced <tt>comult</tt> without making much demand on it. Here's a law that is obviously true in any group that helps to pin down <tt>comult</tt>. It's simply evaluating (p,q) &rarr;(pq,pq) in two different ways.<br /><br /><pre><br />&gt; test_multcomult1 (u,v) = do<br />&gt;     (p,q) &lt;- comult u<br />&gt;     (r,s) &lt;- comult v<br />&gt;     u' &lt;- mult (p,r)<br />&gt;     v' &lt;- mult (q,s)<br />&gt;     return (u',v')<br /><br />&gt; test_multcomult2 (u,v) = do<br />&gt;     w &lt;- mult (u,v)<br />&gt;     comult w<br /><br />&gt; ex7 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_multcomult1 :: (Z,Z) -&gt; Identity (Z,Z)<br />&gt;   rhs = test_multcomult2 :: (Z,Z) -&gt; Identity (Z,Z)<br /><br /></pre><br />Out of laziness I'm not going to test every group law, but shortly I'll show you where to find all of the laws, including the new laws for <tt>comult</tt>.<br /><br /><h3>Hopf Algebras</h3><br /><br /><tt>Identity Z</tt> is just the usual group of integers with addition. But the time has come to switch monads. What's H=<tt>V Float Z</tt>? It's clearly a vector space with basis elements labelled with integers. It's also an instance of <tt>Group (V Float)</tt> meaning it comes equipped with implementations of functions like <tt>unit</tt> and <tt>comult</tt>. But note this: <tt>counit</tt> is no longer trivial. We have <tt>counit :: Z -&gt; V Float ()</tt>. In other words <tt>counit</tt> lifts to a linear map from H to <tt>V Float ()</tt>, which is isomorphic to <tt>Float</tt>. In fact, it sums the coefficients if the basis elements. <tt>unit</tt> now embeds the ground field in our new structure. But what's <tt>mult</tt>? Well <tt>V Float (Z,Z)</tt> is H&otimes;H. So <tt>mult</tt> lifts to a bilinear map from H&times;H to H. We have a vector space with a bilinear multiplication law. Is this law associative? We could write code to check. But here's the really cool bit: we can just reuse <tt>test_assoc</tt>n from above.<br /><br /><pre><br />&gt; ex8 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_assoc1 :: (Z,Z,Z) -&gt; V Float Z<br />&gt;   rhs = test_assoc2 :: (Z,Z,Z) -&gt; V Float Z<br /><br /></pre><br />By switching monad, we automatically get a new algebraic structure and new 'semantics' for the group laws. Unpacking <tt>ex8</tt> reveals that it gives the associativity law for an <a href=\"http://en.wikipedia.org/wiki/Algebra\">algebra</a>. Unpacking further group laws in this context gives <a href=\"http://en.wikipedia.org/wiki/Bialgebra\">bialgebra</a> laws.<br /><br /><pre><br />&gt; ex9 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_multcomult1 :: (Z,Z) -&gt; V Float (Z,Z)<br />&gt;   rhs = test_multcomult2 :: (Z,Z) -&gt; V Float (Z,Z)<br /><br /></pre><br />And 'monadifying' the laws about group inverses give rise to the <a href=\"http://en.wikipedia.org/wiki/Hopf_algebra\">Hopf algebra</a> laws for the antipode:<br /><br /><pre><br />&gt; ex10 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_antipode1 :: Z -&gt; V Float Z<br />&gt;   rhs = test_antipode2 :: Z -&gt; V Float Z<br /><br /></pre><br />In other words, a Hopf algebra over <tt>k</tt> is nothing other than a group in the generalised sense above using the monad <tt>V k</tt>. The underlying object and all of the Hopf algebra laws just follow automatically as soon as you switch monads. Groups and Hopf algebras are the <a href=\"http://en.wikipedia.org/wiki/Hopf_algebra#Analogy_with_groups\">same thing</a>.<br /><br />But we still have this example Hopf algebra <tt>V Float Z</tt> to think about. It's none other than the <a href=\"http://en.wikipedia.org/wiki/Group_Hopf_algebra\">group algebra</a> of <tt>Z</tt>. It's essentially the algebra of <a href=\"http://en.wikipedia.org/wiki/Laurent_polynomial\">Laurent polynomials</a>. Clearly we could repeat this group algebra construction for any group and <tt>Z</tt> was just an example.<br /><br /><h3>Examples</h3><br /><br />Now I have this machinery for working with Hopf algebras I might as well construct some examples that aren't simply generated by some underlying group. I found some pretty combinatorial examples in <a href=\"http://elib.mi.sanu.ac.yu/files/journals/kjm/30/kjom3024.pdf\">this paper</a>.<br /><br />Firstly I'd like to define some combinatorial operations on lists: <tt>cat</tt>, <tt>chop</tt>, <tt>shuffle</tt> and <tt>excise</tt>.<br /><br /><tt>cat</tt> simply joins a pair of lists.<br /><br /><pre><br />&gt; cat x = return $ uncurry (++) x<br /><br /></pre><br /><tt>chop</tt> computes a kind of inverse of <tt>cat</tt>. This inverse is multivalued so depending on which monad is used it can return all of the possible pairs that could have been <tt>cat</tt>ted to make a particular list.<br /><br /><pre><br />&gt; chop :: (MonadPlus m, Functor m) =&gt; [a] -&gt; m ([a], [a])<br />&gt; chop [] = return ([],[])<br />&gt; chop (a:as) = return ([],a:as) `mplus` fmap ((a:) `both` id) (chop as)<br /><br /></pre><br /><tt>shuffle</tt> finds all the ways that two lists can be riffle shuffled together.<br /><br /><pre><br />&gt; shuffle ([],b) = return b<br />&gt; shuffle (a,[]) = return a<br />&gt; shuffle (a:as,b:bs) =<br />&gt;     fmap (a:) (shuffle (as,b:bs)) `mplus`<br />&gt;     fmap (b:) (shuffle (a:as,bs))<br /><br /></pre><br /><tt>excise</tt> is the multivalued inverse of <tt>shuffle</tt> in that it finds all of the ways pairs of lists could have been riffle shuffled together to give a particular list.<br /><br /><pre><br />&gt; excise [] = return (mzero,mzero)<br />&gt; excise (a:as) = do<br />&gt;     (x,y) &lt;- excise as<br />&gt;     return (a:x,y) `mplus` return (x,a:y)<br /><br /></pre><br />We can now define a pair of Hopf algebras as follows.<br /><br /><pre><br />&gt; newtype Hopf1 = H1 [Int] deriving (Ord,Eq,Show,Arbitrary)<br /><br />&gt; instance Group (V Float) Hopf1 where<br />&gt;     unit _ = return (H1 [])<br />&gt;     counit (H1 []) = return ()<br />&gt;     counit _ = zero<br />&gt;     mult (H1 x,H1 y) = fmap H1 $ cat (x,y)<br />&gt;     comult (H1 x) = fmap (\\(x,y) -&gt; (H1 x,H1 y)) $ excise x<br />&gt;     anti (H1 x) = (-1)^(length x) .* return (H1 $ reverse x)<br /><br />&gt; newtype Hopf2 = H2 [Int] deriving (Ord,Eq,Show,Arbitrary)<br /><br />&gt; instance Group (V Float) Hopf2 where<br />&gt;     unit _ = return (H2 [])<br />&gt;     counit (H2 []) = return ()<br />&gt;     counit _ = zero<br />&gt;     mult (H2 x,H2 y) = fmap H2 $ shuffle (x,y)<br />&gt;     comult (H2 x) = fmap (\\(x,y) -&gt; (H2 x,H2 y)) $ chop x<br />&gt;     anti (H2 x) = (-1)^(length x) .* return (H2 $ reverse x)<br /><br /></pre><br />We can now test some of the Hopf algebra laws<br /><br /><pre><br />&gt; ex11 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_assoc1 :: (Hopf1,Hopf1,Hopf1) -&gt; V Float Hopf1<br />&gt;   rhs = test_assoc2 :: (Hopf1,Hopf1,Hopf1) -&gt; V Float Hopf1<br /><br /></pre><br />Unfortunately my code is a inefficient, and the shuffles cause combinatorial explosions, so it's probably best not to run these examples. This post is about expressing algebraic structures rather than making practical computations in them.<br /><br /><pre><br />&gt; ex12 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_coassoc1 :: Hopf1 -&gt; V Float (Hopf1,Hopf1,Hopf1)<br />&gt;   rhs = test_coassoc2 :: Hopf1 -&gt; V Float (Hopf1,Hopf1,Hopf1)<br /><br />&gt; ex13 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_antipode1 :: Hopf1 -&gt; V Float Hopf1<br />&gt;   rhs = test_antipode2 :: Hopf1 -&gt; V Float Hopf1<br /><br />&gt; ex14 = quickCheck (\\a -&gt; lhs a==rhs a) where<br />&gt;   lhs = test_multcomult1 :: (Hopf1,Hopf1) -&gt; V Float (Hopf1,Hopf1)<br />&gt;   rhs = test_multcomult2 :: (Hopf1,Hopf1) -&gt; V Float (Hopf1,Hopf1)<br /><br /></pre><br />And of course you can try the same with <tt>Hopf2</tt>.<br /><br /><h3>Sweedler Notation</h3><br />There's one last important thing to come out of these. We have a powerful notation for working with tensor products of vector spaces but the notation is so easy to use that it's hidden the fact that there's complex stuff going on under the hood. When we're dealing with the <tt>Identity</tt> monad then a line like <tt>(p,q) &lt;- comult u</tt> is pretty straightforward to interpret as an assignment. But in the vector space monad it means something very different. Nonetheless, we can often reason (with care) as if it were just an assignment. This is what <a href=\"http://en.wikipedia.org/wiki/Coalgebra#Sweedler_notation\">Sweedler Notation</a> is about. But it kind of just appears automatically here.<br /><br /><h3>Summary</h3><br />What they say is right. Hopf algebras <a href=\"http://www.youtube.com/watch?v=p3kkm5dYH-w\">really are</a> groups in disguise. Just take all of the functions that make up the structure of a group and convert each one to a Kleisli arrow for the vector space monad. You end up with Hopf algebras.<br /><br />I'm amazed at the way I could express this level of abstraction in Haskell. I don't know of any computer algebra package that comes near to this level of expressivity. Although algebra packages often come with amazing implementations of algebraic algorithms, the programming languages they come with are generally completely uninteresting in themselves. I'm looking forward to the day when computational algebraists and programming language theorists get talking to each other.<br /><br />By the way, this kind of manipulation was what monads were invented for. It's nice to see the two different applications work so well together.", homepage = "http://sigfpe.blogspot.com/2008/08/hopf-algebra-group-monad.html", isRead = True},RssItem {title = "Roman Cheplyaka: Status report: week 9-10", content = "<p>I'm back from <a href=\"http://imc-math.org/\">IMC</a> at Bulgaria with second prize, and ready to work!</p>\n\n<p>While I was away I thought about generic convex polyhedra and actually\nstarted implementing them. I hope to finish that in a few days. This\nnot only makes engine practically more useful but also makes some\ncomputations more cheap and robust.</p>\n\n<p>Also I discovered some problem with my last collision handler. It\nconforms to one paper, and now I doubt that paper is correct. I'll\nconsult local physicists in the nearest time.</p>\n\n<p>Finally, I read several papers on broad-phase collision detection. The\none I liked most is <a href=\"http://www.inf.ufrgs.br/~comba/papers/2005/sabsp-i3d05.pdf\">Broad-Phase Collision Detection Using Semi-Adjusting\nBSP-trees</a>. So I'll start implementing it as soon as possible.</p>", homepage = "http://physics-dph.blogspot.com/2008/08/status-report-week-9-10.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Trivial Monad solutions", content = "Okay, a monad is a mathematical form, which <a href=\"http://sigfpe.blogspot.com/2007/04/trivial-monad.html\">sigfpe describes in his blog</a>.  He then proposes a series of exercises [reminiscent of my own <a href=\"http://www.cotilliongroup.com/arts/bird-puzzles.html\">exercises in combinatory logic</a>], and even provides solutions.   I came up with quite a different solution set, as I used his entry, and his entry only, as the source material.<br /><br />A recap of monad:  a monad is an opaque decorator.  It takes a thing (including taking nothing) and hides that thing behind the monadic form.  In sigfpe's example, the monad, <tt>W</tt>, takes a number (or anything else, for that matter), consuming it.<br /><br />A monad, then, is like a katamari or a black hole, ... or Kuzko: <a href=\"http://www.imdb.com/title/tt0120917/\">no touchy</a>!<br /><br />So, then, the question naturally arises: how does one interact with the captured data?  Well, the monad interface provides two basic operations in its protocol: <kbd>return</kbd> and <code>bind</code> (sometimes written <code>>>=</code>).<br /><br /><ul><li><kbd>return</kbd> \"lifts\" an object into the monadic form.  In propositional logic, <kbd>return</kbd> is <code>a &rarr; m a</code> &mdash; '<code><kbd>return</kbd> 5</code>' would yield '<code><tt>W</tt> 5</code>' in sigfpe's example.</li><br /><li><code>bind</code> takes a function that transforms an object to a monad and converts that function that transforms the object within that monad.  In propositional logic, <code>bind</code> is <code>(a &rarr; m b) &rarr; (m a &rarr; m b)</code></li><br /></ul><br /><br />So, <code>bind</code> is used frequently when working with data and their monadic forms, and from it other functions may be derived, such as <kbd>fmap</kbd>, which maps (converts) a function that works on \"ordinary\" data to one that works on monads ... <kbd>fmap</kbd> is <code>(a &rarr; b) &rarr; (m a &rarr; m b)</code>.  Note the closeness to <code>bind</code>: the derivation of <kbd>fmap</kbd> is <code>&lambda; x . bind (<kbd>return</kbd> &bull; x)</code> (where <code>&bull;</code> is composition (the <a href=\"http://www.cotilliongroup.com/man/combinators-man.html\">B combinator</a>, or <a href=\"http://www.cotilliongroup.com/arts/bird-puzzles.html#bird-blue\">Bluebird</a>, from combinatorial logic), and <code>&lambda;</code> introduces a variable in the expression).<br /><br />The above is enough introductory material to solve sigfpe's first two exercises, which I reproduce here:<br /><br /><u>Exercise 1</u>: Write a function, <code>g</code>, that adds a number to a monad containing a number, returning a new monad with the sum, or <code>g :: a &rarr; m a &rarr; m a</code>.<br /><br /><u>Solution 1</u>: well, given that addition is of the form <code>(+) :: a &rarr; a &rarr; a</code>, and that <kbd>fmap</kbd> lifts an ordinary function to a monadic one, the solution nearly writes itself:<br /><br /><blockquote><code>g x my = <kbd>fmap</kbd> (+ x) my</code></blockquote><br /><br />What is simply done here is to construct a \"plus x\" function by applying <code>x</code> to the addition operator &mdash; note that <code> (+x) :: a &rarr; a</code>.  We then lift that function to its monadic equivalent with <kbd>fmap</kbd> and apply the result to the number (<code>y</code>) contained in the monad (<code>my</code>).  <em><a href=\"http://dauclair.blogspot.com/2007/03/pirates-vs-ninjas.html\">Q.E.D.</a></em><br /><br /><u>Exercise 2</u>: Write a function, <code>h</code>, that adds monadic numbers, returning a new monad containing the sum, or <code>h :: m a &rarr; m a &rarr; m a</code><br /><br /><u>Solution 2</u>: This provided a spot of bother for me.  Whereas in the last solution, one could take the first number and apply it to addition to come up with a function that fit the form of <kbd>fmap</kbd>, in this case, we don't have <em>any</em> numbers with which to simplify addition to a form we can use, as they are all rolled up into monadic forms.<br /><br />I described the problem thusly to my daughter, EM.<br /><br /><blockquote>Me: <em>You know addition, right?</em><br />EM: <em>What's that, Papa?</em><br />Me: <em>What's one plus two?</em><br />EM, immediately:<em>Three! ... and ten plus ten is twenty! ... and twenty plus twenty is thirty! ... and thirty plus thirty is forty!</em><br />Me, clearing my throat, letting the errors pass in light of the delighted exuberance with which she delivered her answers: <em>Um, yes, well.  Here's my problem, let's say Thing One has a number hiding behind its back, that it won't show you, and Thing Two has a number hiding behind its back, too, that it won't show you, and you're asked to add those two numbers and give the answer to Thing Three.  How do I do that?</em><br />EM, rolling her eyes: <em>Papa, there isn't a Thing Three in the <u>Cat in the Hat</u>!</em><br />Me: <em>Yes, well, suppose there was; how would I do this?</em><br />EM: <em>Can you peek behind their backs to see what the numbers are?</em><br />Me: <em>No, you're not allowed; besides, those Things are much too fast to run behind them, remember how they ran through the house with kites? ... So, we must use something like the <kbd>fmap</kbd>-box-maker, because addition is a box that takes numbers and yields numbers, but we need a box that takes Things and yields Things.</em></blockquote><br /><br />Using <kbd>fmap</kbd> does work its way into the solution I eventually derived, but another important player for this solution is also <code>bind</code> used in conjunction with a technique of <em>deferred computation</em>.<br /><br />You see, just like the solution for exercise 1, we'd like to apply a number to addition to obtain a function for use by <kbd>fmap</kbd>.  The problem is that we have no such number (just monadic values), but this is where <code>bind</code> is of use.  Recall that <code>bind :: (a &rarr; m b) &rarr; (m a &rarr; m b)</code>.  The standard given explanation of <code>bind</code> is that it transforms a function that lifts ordinary data into monads to a function that works entirely in the monadic domain.  But an entirely different way of looking at <code>bind</code> is that <em>it treats a given monad like ordinary data</em> as input to the lifting function.  <a href=\"http://en.wikipedia.org/wiki/Eureka_(word)\">\206\181\225\189\149\207\129\206\183\206\186\206\177</a>! [No, I'm not about to hop out of the tub and run around town with my towel flapping in the wind]<br /><br />The latter usage is the <em>only</em> one for those using <code>>>=</code> (which has the English language pronunciation of \"bind\", as well, confusingly), but if we take sigfpe's entry as the sole and base source, this \"discovery\" is quite the epiphany.  And with that understanding, along with some deferred computational hand-waving, the solution then, again, presents itself:<br /><br /><blockquote><code>h w1 w2 = bind (&lambda; x . <kbd>fmap</kbd> (+ x) w2) w1</code></blockquote><br /><br />Working from the parenthetical expression outward, we again see the <code><kbd>fmap</kbd> (+ x)</code> form, unaltered from the solution to exercise 1, giving us a number-to-monad function.  The catch here is that we have no such number, so we give a promise that there will be such a number eventually with the &lambda;-introduction.  We then immediately fulfill that promise with <code>bind</code>: we apply the number-to-monad function to <code>w1</code>, treating that monadic value <em>as if it were a plain number</em> (that's what <code>bind</code> gives us permission to do), rendering the solution.  <em>Q.E.D.</em><br /><br /><strong>Critique</strong><br /><br />I obtained solution 1 almost immediately by matching the logic of <kbd>fmap</kbd> to that of the problem description.  It seemed to me to be rather trivial, so I was taken aback at the lengths and \"arcane-ness\" that sigfpe put into his solution.<br /><br />On the other hand, sigfpe merely needed to augment his first solution with variable introduction to obtain his second solution.  His second solution was trivially-obtained and obvious, given his approach to the first solution, whereas I had to struggle quite some time &mdash; introducing both &lambda;-abstraction (as sigfpe does) <em>and</em> <code>bind</code> (which sigfpe already had in the alternate syntactic form of <code>>>=</code>) &mdash; to obtain mine.<br /><br />In my defense, my solutions use only the monadic tools introduced in sigfpe's blog entry.  On the other hand, Haskell programmers accustomed with monads rarely use <kbd>fmap</kbd>, regarding it as esoteric or superfluous, and instead rely on <code>>>=</code>, or inline binding entirely with the more \"natural\" <a href=\"http://haskell.org/onlinereport/exps.html#sect3.14\"><kbd>do</kbd>-notation</a> (although there has been <a href=\"http://syntaxfree.wordpress.com/2006/12/12/do-notation-considered-harmful/\">some grumblings against it</a>), so in the light of that experience, sigfpe's solutions are natural and the first way most Haskell programmers would solve these exercises.  This entry here, then, is from the perspective of someone not familiar with Haskell's approach to monads deriving the solutions from the principles of the provided function <code>bind</code> and its derived sibling <kbd>fmap</kbd> as discussed in sigfpe's blog entry.<br /><br />Please see <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions-cont.html\">my next post</a> for the solutions to sigfpe's exercises 3 and 4.", homepage = "http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Trivial Monad solutions (cont.)", content = "This is a continuation of the <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions.html\">previous entry on the subject</a>, with the solutions for exercises 3 and 4.  But, we are now finally and formally introduced to the Haskell-style bind operator: <code>>>=</code>.  What <code>>>=</code> (which is pronounced: \"bind\") does is to give the value the monad contains to the function that then uses it.  More formally defined (specific to sigfpe's trivial monad example): <br /><br /><blockquote><code><tt>W</tt> a >>= f &equiv; f a</code></blockquote><br />An example of the syntax (again, following <a href=\"http://sigfpe.blogspot.com/2007/04/trivial-monad.html\">sigfpe's post</a>) is as follows:<br /><br /><blockquote><code><tt>W</tt> 5 >>= f</code></blockquote><br /><br />(where <code>f</code> was defined in sigfpe's post as an increment function for his trivial monad: <code>f x = <tt>W</tt> (x + 1)</code>).  The above example would result in the (monadic) value <code><tt>W</tt> 6</code>. So, now you see <code>>>=</code> (trivially) in action, and sigfpe asks us to put it into use for the following exercises.<br /><br />The first exercise that we'll continue on in this entry is <u>exercise 3</u>, which is to prove the <a href=\"http://haskell.org/haskellwiki/Monad_Laws\">three monad laws</a>:<br /><br /><blockquote>Left Identity:  <code><kbd>return</kbd> a >>= f &equiv; f a</code></blockquote><br /><br />or, a monadized value bound to a function is the same as applying a function to the plain value.<br /><br /><blockquote>Right Identity:  <code>m >>= <kbd>return</kbd> &equiv; m</code></blockquote><br /><br />or, a monad bound to return is just that monad, again (or, the identity function for monads is <code>bind <kbd>return</kbd></code>), and finally:<br /><br /><blockquote>Associativity: <code>(m >>= f) >>= g == m >>= ((&lambda; x . f x) >>= g)</code></blockquote> <br /><br />which is similar in spirit to associativity for addition, i.e.: <code>(a + b) + c &equiv; a + (b + c)</code>.<br /><br /><blockquote>Just a side note here, some people become discouraged when they are told \"to prove\" something, whereas if they are asked \"to solve\" a problem, they turn right to it.  <a href=\"http://www.amazon.com/How-Solve-Heuristics-Zbigniew-Michalewicz/dp/3540660615\">Fogel and Michalewicz</a> rightly point out that proving and solving are basically the same process!<br /><br />My <em>cara spoza</em> asked me, as I was attempting to (re-)prove <code>liftM2 (+)</code> for exercise 2, \"Is proving difficult?\"  The question gave me pause: \"Well, sometimes the simplest proof can elude me for days, and sometimes something that appears much more difficult comes in a flash.\"</blockquote><br /><br />So, let's prove each of these laws in turn, using the definitions of <code>>>=</code> and <kbd>return</kbd> as axioms.<br /><br />First up, Left Identity:<table border=\"0\"><br /><tr><th>Prove:</th><td><code><kbd>return</kbd> a >>= f</code></td><br />       <td><code>&equiv;</code></td><td><code>f a</code></td><td>&nbsp;</td></tr><br /><tr><td align=\"right\">1.</td><td><code><kbd>return</kbd> a >>= f</code></td><br />       <td><code>&equiv;</code></td><br />       <td><code><tt>W</tt> a >>= f</code></td><br />       <td><kbd>return</kbd> definition</td></tr><br /><tr><td align=\"right\">2.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code>f a</code></td><br />       <td><code>>>=</code> definition</td></tr><br /><tr><th><em>Q.E.D.</em></th><td colspan=\"3\">&nbsp;</td></tr><br /></table><br />Next, Right Identity:<table border=\"0\"><br /><tr><th>Prove:</th><td><code>m >>= <kbd>return</kbd></code></td><br />       <td><code>&equiv;</code></td><td><code>m</code></td><td>&nbsp;</td></tr><br /><tr><td align=\"right\">1.</td><td><code>m >>= <kbd>return</kbd></code></td><br />       <td><code>&equiv;</code></td><br />       <td><code><tt>W</tt> a >>= <kbd>return</kbd></code></td><br />       <td>monad identity</td></tr><br /><tr><td align=\"right\">2.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code><kbd>return</kbd> a</code></td><br />       <td><code>>>=</code> definition</td></tr><br /><tr><td align=\"right\">3.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code><tt>W</tt> a</code></td><br />       <td><kbd>return</kbd> definition</td></tr><br /><tr><td align=\"right\">4.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code>m</code></td><br />       <td>monad identity</td></tr><br /><tr><th><em>Q.E.D.</em></th><td colspan=\"3\">&nbsp;</td></tr><br /></table><br /><br />And, finally, let's prove associativity.  We'll start out by reducing the left hand side (\"lhs\") to something simpler:<table border=\"0\"><br /><tr><th>Simplify:</th><td><code>(m >>= f) >>= g</code></td><br />       <td colspan=\"3\">&nbsp;</td></tr><br /><tr><td align=\"right\">1.</td><td><code>(m >>= f) >>= g</code></td><br />       <td><code>&equiv;</code></td><br />       <td><code>(<tt>W</tt> a >>= f) >>= g</code></td><br />       <td>monad identity</td></tr><br /><tr><td align=\"right\">2.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code>f a >>= g</code></td><br />       <td><code>>>=</code> definition</td></tr><br /></table><br /><br />... but it was here that I became stymied, for I didn't see how to transform <code>f a >>= g</code> into something resembling the right hand side (rhs), which is <code>m >>= (&lambda; x . f x >>= g)</code>.  Do you?  Give it a try!<br /><br />...<br /><br />The thing to do, when one becomes stuck solving or proving something, is to acknowledge that fact, and then to try something entirely different.  One way to try something different is to rework the simplification of the lhs so it assumes a form much closer to what the rhs is.  I didn't see this approach to be fruitful, however: I reduced the lhs to be something pretty simple, so a rework would make the lhs more complicated -- clutter often obscures correlation.  Another approach is to leave the lhs be and work on simplifying the rhs -- maybe a simplification there would yield an useful correspondence.  Let's do that:<table border=\"0\"><br /><tr><th>Simplify:</th><td><code>m >>= (&lambda; x . f x >>= g)</code></td><br />       <td colspan=\"3\">&nbsp;</td></tr><br /><tr><td align=\"right\">1.</td><td><code>m >>= (&lambda; x . f  x >>= g)</code></td><br />       <td><code>&equiv;</code></td><br />       <td><code>(<tt>W</tt> a >>= (&lambda; x . f x >>= g)</code></td><br />       <td>monad identity</td></tr><br /><tr><td align=\"right\">2.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code>(&lambda; x . f x >>= g) a</code></td><br />       <td><code>>>=</code> definition</td></tr><br /><tr><td align=\"right\">3.</td><td>&nbsp;</td><br />       <td><code>&equiv;</code></td><br />       <td><code>f a >>= g</code></td><br />       <td><a href=\"http://en.wikipedia.org/wiki/Beta_normal_form\">&beta;-reduction</a></td></tr><br /></table><br /><br />Ha! Now we see that the simplification of the lhs is identical to the simplification of the rhs.  That was easier than expected.<br /><br /><strong><em>Q.E.D.</em></strong><br /><br />To summarize this exercise, proving something or solving something is really a rather simple task: using the tools you have to match the solution to the problem.  The fun part comes in when you discover new ways to use the given tools, or, finding out the given tools aren't sufficient, which means finding new tools to solve the problem.  Once you have your tools, along with the problem statement and desired outcome, it is often the case that there is a simple walk from the problem to the solution, the solution to the problem, or both meet somewhere in the middle.  Odds are, you are not the first one solving a problem, if you need help, there's a whole big world out there -- someone probably has already left the solution out there for you to find.<br /><br /><u>Exercise 4</u>: Monads cannot be unwrapped completed back to the plain value they carry, but if a monad is layered, that is a monad contains a monad, it is possible to remove one or more layers.  <code>join</code> is such a function that does this \"unlayering\".  Given a layered monad <code>mm = <tt>W</tt> (<tt>W</tt> x)</code>, <code>join mm</code> will return the value <code><tt>W</tt> x</code>.  The declaration for <code>join</code> is:<br /><br /><blockquote><code>join :: <tt>W </tt>(<tt>W</tt> a) &rarr; <tt>W</tt> a</code></blockquote><br /><br />Define it.<br /><br /><u>Solution 4</u>: Well, the declaration for <code>join</code> looks suspiciously like an application of <code>>>=</code> (you are pronouncing that operator \"bind\", right?), as it hands the value carried by the monad for function application.  <br /><br /><blockquote><code>join mm = mm >>= </code><em><font color=\"red\">?f?</font></em></blockquote><br /><br />The question then becomes \"what function to apply the carried value to?\" The problem is that <code>>>=</code> has already given us the answer, <code><tt>W</tt> x</code>, so we just wish to have <code><font color=\"green\">join</font></code> return that value unaltered.  Fortunately for us, there is such a function from combinatory logic called the <em>identity combinator</em>, <code>I</code>, which has the form <code>&lambda; x . x</code>, and Haskell already has that definition (it is named id), so we simply use that for the hole in the above definition:<br /><br /><blockquote><code>join mm = mm >>= <kbd>id</kbd></code></blockquote><br /><br /><strong><em>Q.E.D.</em></strong><br /><br />In conclusion, I hope these entries have helped you to see that monads are actually a rather simply concept that are easy to use.  This is just the tip of the iceberg, however: monads are used pervasively in Haskell, tackling a great many tasks.  May I suggest <a href=\"http://uebb.cs.tu-berlin.de/~magr/pub/Transformers.en.html\">the excellent and practical tutorial on Monad Transformers</a>?  Please do not be put off by the imposing front page to the paper, as this tutorial shows how monads and their transformers shine, giving a step-by-step introduction of new functionality of monads into a plain-vanilla system.", homepage = "http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions-cont.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Orators' exercise", content = "I practice <a href=\"http://www.cotilliongroup.com/arts/en-verse.html\">this exercise</a> daily.  Don't sight read it; read it aloud.  The <a href=\"http://haskell.org\">Haskell</a> program that produced this uses a <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions.html\">monad</a>; the heart of which is as follows:<br /><br /><blockquote><pre>-- parses a poem, refering words to CMU for pronounciation<br /><br />parsePoem = <kbd>do</kbd> p &larr; <kbd>getContents</kbd><br />               <kbd>return</kbd> (checkEachLine (<kbd>lines</kbd> p))<br /><br />main = <kbd>do</kbd> p &larr; parsePoem<br />          <kbd>putStr</kbd> p</pre></blockquote><br /><br />Do you see the monad?  Well, that's a rather mean question, because the monad is entirely implied in this program fragment.  <br /><br />One of the motivators for incorporating monads into Haskell was dealing with things in the \"real world\" that fall outside easy descriptions in purely functional (mathematical) domains.  One of those things is input and output.  Whereas an equation...<br /><br /><blockquote><code>1+1=2</code></blockquote><br /><br />... was true yesterday, is true now, and will be true tomorrow (albeit, it took over 100 pages of introduction to set theory in the <em>Principia Mathematica</em> to be able to back up that truth), things of the \"real world\", particularly input and output change, and change irrevocably.  For example, if I buy and eat some ice cream <em>(mint chocolate chip, please!)</em>, I'm not getting a refund.  The state of the world has changed: I'm parted from my money, and that scoop of ice cream is no longer in the shop's inventory (and they have a <a href=\"http://www.irs.gov\">Form 1120S, Schedule A</a> to prove it).  Input/output, as part of the state of the world, is one of the members of the <a href=\"http://research.microsoft.com/~simonpj/papers/marktoberdorf/\">awkward squad</a>.  So, to help it to be a used and useful language, the Haskell designers included the <tt>IO</tt> monad as one of the libraries.<br /><br />So, if one were to query <code>main</code> and <code>parsePoem</code>, one would find that they are the types <tt>IO</tt> <code>()</code> and  <code><tt>IO</tt> [<tt>Char</tt>]</code>, respectively, meaning that <code>main</code> interacts with <tt>IO</tt>, returning \"nothing\", and <code>parsePoem</code> interacts with <tt>IO</tt>, returning a list of characters (the <a href=\"http://www.cotilliongroup.com/arts/en-verse.html\">poem</a> that you just finished reading aloud).<br /><br />In short, the <tt>IO</tt> monad does all the handshaking (or, more correctly, hand<em>waving</em>) with the state of the world, so the programmer can do something as \"simple\" as printing \"Hello, world!\" easily.  All this monad asks, as every monad asks, is <a href=\"http://www.imdb.com/title/tt0032138/\">\"Pay no attention to that man behind the curtain.\"</a>", homepage = "http://logicaltypes.blogspot.com/2008/05/orators-exercise.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Oh! my acking monad!", content = "So, we just saw, after <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions-cont.html\">reams of paper on proving in inscrutable detail the three monadic laws</a>, that after all that, we see that <a href=\"http://logicaltypes.blogspot.com/2008/05/orators-exercise.html\">using them is pretty easy</a>.  <a href=\"http://en.wikipedia.org/wiki/Hedda_Gabler\">Fancy that, Hedda!</a><br /><br />Haskell does provide several different kinds of monads for various uses, but sometimes one must roll one's own to fit the current need.  I was exploring the <a href=\"http://en.wikipedia.org/wiki/Ackermann_function\">ackermann function</a>, curious to know what <a href=\"http://www.cotilliongroup.com/arts/ack42.txt\">A<sub><small>4,2</small></sub> looked like</a> <em>[oh, yes, 19730 digits in all its (gory) glory -- I went there!]</em> (other than the cop-out of 2<sup><small>65536</small></sup>-3 that is listed in Wikipedia), and whether my computer could calculate and display that value <em>[obviously it could, but it took some work (see below) to arrive at that point]</em>.  The ackermann function written in Haskell looks very much like its representation in standard mathematical notation:<br /><br /><blockquote><pre>a :: <tt>Integer</tt> &rarr; <tt>Integer</tt> &rarr; <tt>Integer</tt><br />a m n | m &equiv; 0           = n + 1<br />      | m > 0 &and; n &equiv; 0   = a (m - 1) 1<br />      | m > 0 &and; n > 0   = a (m - 1) (a m (n - 1))</pre></blockquote><br /><br /><br />The \"problem\" with the Ackermann function is that even though it is easy to write, the recursion required to arrive at a solution from even small (single digit) inputs is staggering.  My computer staggered and then killed the computation in mid-process (too bad <a href=\"http://en.wikipedia.org/wiki/Wolf_in_the_Fold_(TOS_episode)\">Redjak didn't have that option</a>).  The Ackermann function, being not primitively recursive, is also highly redundantly recursive, so it would be nice to provide \"hints\" to the program, something like: \"Oh, you've already computed A<sub><small>3,1</small></sub> to be 13, so you don't need to recompute that entire branch any more.\"<br /><br />This \"hinting\" has a name in computer science; it's called \"memoization\", and Haskell provides the State monad that can be used to cover that functionality quite nicely.  As we're computing the values that build up the solution, we put the smaller-indexed solutions into a dictionary, something like:<table border=\"0\"><br /><tr><td>A<sub><small>3,1</small></sub></td><td>=</td><td>13</td></tr><br /><tr><td>A<sub><small>2,2</small></sub></td><td>=</td><td>7</td></tr><br /><tr><td>A<sub><small>2,1</small></sub></td><td>=</td><td>5</td></tr><br /><tr><td colspan=\"3\" align=\"center\">... and so forth ...</td></tr><br /></table><br /><br />Such a dictionary in Haskell is called a <tt>Map</tt>, because we are mapping from the \"word\" (the indices of the Ackermann function) to the \"definition\" (the solution)...<br /><br /><blockquote><pre><kbd>type</kbd> <tt>Index</tt> = (<tt>Integer</tt>, <tt>Integer</tt>)<br /><kbd>type</kbd> <tt>AckMap</tt> = <tt>Map Index Integer</tt></pre></blockquote><br /><br />... and we wrap that <tt>Map</tt> with the <tt>State</tt> monad ...<br /><br /><blockquote><code><kbd>type</kbd> <tt>AckMapS</tt> = <tt>State AckMap Integer</tt></code></blockquote><br /><br />... where <tt>AckMapS</tt> uses the <tt>AckMap</tt> dictionary to provide the preexisting (partial) solution, or, given there's none yet, populates the solution calculated (the <tt>Integer</tt>) into the dictionary at the current <tt>Index</tt>.  Simple, yes?  So, all we need is an utility function that does the lookup or updates the state ...<br /><br /><blockquote><pre>ackify :: <tt>Integer</tt> &rarr; <tt>Integer</tt> &rarr; <tt>AckMapS</tt><br />ackify m n = get >>= &lambda;ma . <kbd>maybe</kbd> (a' m n >>= update m n) <br />                                 <kbd>return</kbd><br />                                 (<tt>Map</tt>.<kbd>lookup</kbd> (m, n) ma)</pre></blockquote><br /><br />... the update function that actually does the housekeeping ...<br /><br /><blockquote><pre>update :: <tt>Integer</tt> &rarr; <tt>Integer</tt> &rarr; <tt>Integer</tt> &rarr; <tt>AckMapS</tt><br />update m n ans = <kbd>do</kbd> mappo &larr; get<br />                    put (<tt>Map</tt>.insert (m, n) ans mappo)<br />                    <kbd>return</kbd> ans</pre></blockquote><br /><br />... so that our monadic version of the ackermann function is as follows:<br /><br /><blockquote><pre>a' :: <tt>Integer</tt> &rarr; <tt>Integer</tt> &rarr; <tt>AckMapS</tt><br />a' m n | m &equiv; 0           = <kbd>return</kbd> (n + 1)<br />       | m > 0 &and; n &equiv; 0   = ackify (m - 1) 1<br />       | m > 0 &and; n > 0   = ackify m (n - 1) >>= ackify (m - 1)</pre></blockquote><br /><br />which looks very much the same as the original function, with calls to <code>a</code> being replaced by calls to the lookup-or-update <code>ackify</code> function and function composition (e.g. <code>a (m - 1) (a m (n - 1))</code>) being replaced by the monadic composer, <code>>>=</code>.  So, from the above demonstration we see that monads are not only easy to use, but also easy to \"roll your own\" and integrate into preexisting non-monadic code without much fuss.<br /><br /><strong>Critique</strong><br /><br />Although the incorporation of the <tt>State</tt> monad dramatically speeds processing solutions and makes some solutions computable that were unreachable under the na&iuml;ve approach, there are at least two better generalizations:<br /><br /><ol><br /><li>Use the fixpoint (or the <a href=\"http://en.wikipedia.org/wiki/Fixed_point_combinator\">Y-combinator</a>) of the ackermann function so that one can now <a href=\"http://groups.google.bs/group/comp.lang.haskell/browse_thread/thread/89703a5aad523dc5\">decorate the engine of computation without altering its structure at all</a>!  Incredible!  So instead of using a monad to abstract stateful decoration of computations, the fixpont can be used to abstract <em>any</em> decoration of computation!</li><br /><li>Use the compiler to change the code, instead of having it programmed in.  Many functional language compilers have the option to memoize computations automagically.   So, instead of writing code that memorizes partial results, the compiler intercepts the computation, replacing computation with previously calculated values (or running the computation if no such value exists and then storing <em>that</em> result into the runtime). No extra coding; no \"troublesome\" monads.</li><br /></ol><br /><br /><strong>Critique on the critique</strong><br /><br />On the other hand (<em>\"there are five fingers\"</em>, as my favorite Mother-in-law enjoys rejoining),<br /><br /><ol><br /><li>The fixpoint solution is more general and more elegant, but being more general suffers in a slight decrease in efficiency:  it more than likely will run more slowly than the specialized monadic state solution</li><br /><li>With an explicit encoding of state, the programmer has direct say into what is memoized and what is not, but with a compiler directive, <em>everything</em> is memoized.  Since the Ackermann function can be represented by simple functions for m &lt; 4, the map can be replaced by a faux-map for those values, reducing the memory footprint of memoization to only a couple of cells for m == 4 (as opposed to over 150,000 cells for m == 4 and n == 1 using the na&iuml;ve memoization scheme).</li><br /></ol><br /><br />... so the above described solution may be \"good enough\" for the task at hand, after all.  Put another way, when I said I was wrong, I might have been wrong.  <em>Caveat programmer.</em>", homepage = "http://logicaltypes.blogspot.com/2008/05/oh-my-acking-monad.html", isRead = True},RssItem {title = "Matthew Sackman: Reflections on the ICFP Programming Contest 2008", content = "<p>In 2007, Tristan and I decided to enter\nthe <a href=\"http://save-endo.cs.uu.nl/\">ICFP Programming</a>\nContest. We turned up at the right time, downloaded and read the spec,\nand promptly gave up. We instead spent the weekend hacking on a game\nwe were writing.</p>\n\n<p>In 2008, Tristan and I decided to enter the\n<a href=\"http://smlnj.org/icfp08-contest/task.pdf\"></a>. This time, things would be different. We did some\npractise!  We spent 12 hours straight on the 2005 contest\n(<a href=\"http://icfpc.plt-scheme.org/\">Cops and Robbers</a>) and then\ndid a 24 hour (with sleep) session on the 2004 contest\n(<a href=\"http://alliance.seas.upenn.edu/~plclub/cgi-bin/contest/\">Ants</a>). We\nwere pretty pleased with how we did on those and went into the 2008\ncontest with a certain amount of confidence.</p>\n\n<p>To cut a very long story short, we will have done\nbadly, <em>very</em> badly. The results aren't out yet, but we know\nwhich way this will have gone. However, it was immensely fun, and we\nwill be back next year to try and avoid coming last again!</p>\n\n<p>So, being in the UK, the contest started at 8pm on the Friday. Our\nplan was to get all the basic infrastructure up before we went to bed\nas it's pretty straightforward and you don't have to think too\nhard. We used the same basic state machine pattern that we'd developed\nfor the Cops-and-robbers contest and used Lazy ByteString to read off\nthe network socket lazily - I really do think this lazy input pattern\nis lovely, though I can see how it's a real PITA to deal with\nerrors. But we ignored errors which turned out never to be an issue\nanyway. We got to bed at about 2am.</p>\n\n<p>Saturday morning came and we both charged into the office, brimming\nwith ideas. We spent about 4 hours discussing and arguing about what\nwe should do. We both agreed that the only way to win would be to move\nfast, which means that our route planning would have to be\nexcellent. And so that's all we focussed on. We wrote a lot of code\n(over 3000 lines of Haskell in 72 hours between the 2 of us) and the\nvast majority of that was on route finding. Eventually, we realised\nthat what we'd forgotten to do was to think about how to move the robot.</p>\n\n<p>You see, in both of the contests that we'd looked at previously,\nthe setup was that you could pretty much move arbitrarily: if you told\nthe robber to go somewhere, he would do so, no questions\nasked. Whereas this martian rover did not behave in the same way. It\ncould be told to accelerate, brake, roll, turn left or right, but it\nwouldn't accept orders to go to a particular coordinate, and it can't\neven maintain a constant speed, other than not moving at all or moving\nas fast as possible. And we rather forgot to think about the\nconsequences of this. So at the end, we were able to produce some nice\nroutes, but the rover wasn't really very good at following them.</p>\n\n<p>So we used a quad tree, which sort of worked, though it's not\nperfect. Quad trees and oct trees are fine for storing points, but not\nas great for storing areas, which were the boulders and craters. But I\nkind of mashed through that so it basically worked. We then took the\nquad tree and turned it into a graph. Now we didn't really discuss\nthis, but I think we should have spent some time trying to work out\nthe best way to do this, because without thinking about the\nconsequences too much, we just too the vectors of the edges of the\nleaves of the quad tree to be the edges of the graph (actually, that's\nnot quite true. Tris then added lots of other edges so that the nodes\non the boundary of a quad tree leaf were almost fully connected within\nthat leaf. Or something like that), which I'm not sure is the right\nthing to do. And then when we had a graph, we ran shortest path on it,\nwith some extra heuristics.</p>\n\n<p>Which sort of worked. Except that I wrote some very complex\nheuristics, which would try to find a path across a region even if\nthere were boulders in the region. And that maths turned out to be\nvery expensive (though I may have just been doing it wrong), which\nvery quickly meant that as soon as the quad tree got bigish, there\nwere so many paths to consider and so much maths to do, that the\nshortest path algorithms would take far too long to complete, we'd\nloose sync with the rover, and it would all end badly. So I hacked\nbits out to cut the maths down, the rover sort of gained an ability to\ndrive, and it was all pretty much a disaster. Still goood honest\nfun!</p>\n\n<p>So below you have a screenshot from our GUI. The left hand side\nshows the quad tree and the chosen path and the rover and its\ndirection. The right hand side shows the graph which was used for the\nshortest path algorithm.</p>\n\n<img src=\"http://www.wellquite.org/icfp_contest_2008_gui.png\" />", homepage = "http://www.wellquite.org/icfp_contest_2008_reflections.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): No \"fib\"bing; getting into the monad groove", content = "The title is groan-inducing, as all my \"jokes\" are.  I guarantee it: once you've finished reading this entry, reread the title, and you won't be able to stop from groaning.<br /><br />The <a href=\"http://en.wikipedia.org/wiki/Fibonacci_number\">Fibonacci series</a> goes as follows:  0,1,1,2,3,5,8,13..., or put another way, the current number is obtained by adding the previous two numbers.  It is useful for many things, as its limit is the golden ratio, found in nature (the spiral of some <a href=\"http://en.wikipedia.org/wiki/Crustacean\">crustaceans</a> and the population growth of <a href=\"http://www.youtube.com/watch?v=BHiJK1KJHac&amp;feature=related\">rabbits</a> <em>[they <u>must</u> be stopped!]</em>) and in artifice (windows, painting, doors, buildings follow the width and height of this ratio)).<br /><br />Any fibonacci number can be easily computed from the following formula ...<br /><br /><blockquote><pre>fib :: <tt>Integer</tt> &rarr; <tt>Integer</tt><br />fib n | n &equiv; 0     = 0<br />      | n &equiv; 1     = 1<br />      | <kbd>otherwise</kbd> = fib (n-1) + fib (n-2)</pre></blockquote><br /><br />... that is, easily computed if this world were purely mathematical, including the <em>caveat</em> that any computable function could be instantly computed.  Run on a computer, <code>fib 25</code> slows noticeably and <code>fib 50</code> may as well describe the <a href=\"http://en.wikipedia.org/wiki/Halting_problem\">halting problem</a>, because I wasn't going to wait around for it to terminate.<br /><br />Note the similarity between the computation of the Fibonacci series to the computation of the <a href=\"http://logicaltypes.blogspot.com/2008/05/oh-my-acking-monad.html\">Ackermann table</a>.  They are not the same kind of problem, mind you, as the Ackermann is not primitively recursive; the Fibonacci is \"only\" doubly (branching) recursive.  But they are similar enough in that they can be solved in similar ways.  Given that the current Fibonacci number is the sum of the previous two Fibonacci numbers, we need only a (reversed) list to <em>memoize</em> the previous results, so the above sequence becomes:<br /><br /><blockquote><code>[..., 13, 8, 5, 3, 2, 1, 1, 0]</code></blockquote><br /><br />and the \"next\" Fibonacci number would be simply the first two elements of this list (21, in this case).  But how do we know where we are in the sequence?  Easy: the length of this list tells us where we are, and in this case, the list has 8 elements, meaning the \"next\" Fib is 9th in the sequence.<br /><br />So, turning to monads with this list structure for memoization, the code falls out as follows:<br /><br /><blockquote><pre>fib :: <tt>Int</tt> &rarr; <tt>FibS</tt><br />fib n = get >>= &lambda;mem . <kbd>maybe</kbd> (fib' n >>= update)<br />                             <kbd>return</kbd><br />                             (gimme mem n)</pre></blockquote><br /><br />So, <code>fib</code> is now simply a decision: \"Do I have the fib requested in the list?\" \"Yes: <code>gimme</code> it and <kbd>return</kbd> it\" or \"No: compute it and then <code>update</code> the list\"<br /><br />The list is a very slight variation on a regular list type, as we choose to carry around its length (as opposed to recomputing it at each iteration), and we lift this new data type into the <tt>State</tt> monad (as we did with the <tt>Map</tt> data type for our Ackermann monad optimization):<br /><br /><blockquote><pre><kbd>data</kbd> <tt>Mem</tt> = <tt>Mem</tt> [<tt>Integer</tt>] <tt>Int</tt><br /><kbd>type</kbd> <tt>FibS</tt> = <tt>State Mem Integer</tt></pre></blockquote><br /><br />The actual computation function is lifted into the monadic form with very little variation ...<br /><br /><blockquote><pre>fib' :: <tt>Int</tt> &rarr; <tt>FibS</tt><br />fib' n | n &equiv; 0     = <kbd>return</kbd> 0<br />       | n &equiv; 1     = <kbd>return</kbd> 1<br />       | <kbd>otherwise</kbd> = liftM2 (+) (fib (n - 1)) (fib (n - 2))</pre></blockquote><br /><br />... where monadic addition, <code>liftM2 (+)</code>, replaces addition in the usual sense (recall the <a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions.html\">spot of bother</a> we had \"adding\" Thing One to Thing Two), and where the plain numbers are lifted into the monad with <kbd>return</kbd>.  In brief, the substance is now monadic but the structure is the same as our original, plain, <code>fib</code>.<br /><br />The other housekeeping functions are new for the monadic solution, but what one would expect.  The <code>update</code> follows in the same vein as the one for the <a href=\"http://dauclair.blogspot.com/2008/04/oh-my-acking-monad.html\">ackermann monad</a>:<br /><br /><blockquote><pre>update :: <tt>Integer</tt> &rarr; <tt>FibS</tt><br />update n = <kbd>do</kbd> (<tt>Mem</tt> lst len) &larr; get<br />              put (<tt>Mem</tt> (n:lst) (len + 1))<br />              <kbd>return</kbd> n</pre></blockquote><br /><br />An interpretation of the <code>update</code> function is that it is the identity function with the side-effect that it remembers the result that it <kbd>return</kbd>s.<br /><br />The only other function is the self-describing <code>gimme</code> which retrieves a previously-computed fibonacci number from memory:<br /><br /><blockquote><pre>gimme :: <tt>Mem</tt> &rarr; <tt>Int</tt> &rarr; <tt>Maybe Integer</tt><br />gimme (<tt>Mem</tt> (h:t) len) n | len &equiv; n   = <tt>Just</tt> h<br />                        | len > n   = <kbd>let</kbd> x = (len - 1) - n<br />                                      <kbd>in</kbd> <tt>Just</tt> (t !! x)<br />                        | <kbd>otherwise</kbd> = <tt>Nothing</tt></pre></blockquote><br /><br />This <code>gimme</code> function uses the <a href=\"http://haskell.org/onlinereport/maybe.html\"><tt>Maybe</tt> monad</a> and <a href=\"http://en.wikibooks.org/wiki/Haskell/Advanced_monads\">its functionality</a>, saying \"If I have the value already computed <em>[If the list length is equal to or greater than the requested index]</em>, then return <tt>Just</tt> that value; <kbd>otherwise</kbd> I've got <tt>Nothing</tt>, so you need to compute that value.\"<br /><br />In summary, we've decorated the na&iuml;ve fibonacci algorithm with some memory and three new functions (one manager and two support functions).  What is the payoff?<br /><br /><blockquote><pre><font color=\"black\">Ready></font> fib 1500<br /><em>[no delay]</em><br /><font color=\"black\">135511256685631019516369368671484083777860107124184972421335<br />431532214873108735287506122593540357172653003737788143473202<br />576992570823565500453499141029242495959974839822286992875272<br />419318113250950996424476212422002092544399201969604653214384<br />983053458933789325853933815390935494792961948008381459961871<br />22583354898000<br /><br />Ready></font> fib 50000<br /><em>[4 second delay]</em><br /><em>[<a href=\"http://www.cotilliongroup.com/arts/fib50000.txt\">10615 digits</a>]</em><br /><br /><font color=\"black\">Ready></font> fib 60000<br /><em>[2.5 second delay]</em><br /><font color=\"black\">*** Exception: stack overflow</font></pre></blockquote><br /><br />These results are a great step forward over the na&iuml;ve <code>fib</code> implementation (which essentially froze at <code>fib 50</code>) and even <a href=\"http://www.cotilliongroup.com/arts/DCG.html\">memoized implementation reported elsewhere</a> (which ran out of memory after <code>fib 1450</code>).<br /><br />Huzzah! then for efficient program representation in Haskell and monadic code.", homepage = "http://logicaltypes.blogspot.com/2008/05/no-fibbing-getting-into-monad-groove.html", isRead = True},RssItem {title = "Douglas M. Auclair (geophf): Choice with Monads: List, Maybe, Either", content = "We've seen up to now what monads are and how they can be useful in simple ways, such as for heavy lifting on recursive addition.  So, monads are useful for housekeeping when you have more work than a computer could handle in a straightforward manner.  This work is called <em>deterministic</em>, meaning that the computation occurs in only one way.  As we have seen, monads can be helpful with this kind of computation.  But monads can be helpful with <em>nondeterministic</em> computations, or computations that proceed along multiple possible paths, as we shall see.<br /><br />Haskell comes with three kinds of monads that have been used specifically for nondeterministic computation: the <tt><a href=\"http://logicaltypes.blogspot.com/feeds/posts/default#maybe\">Maybe</a></tt> monad, the <a href=\"http://logicaltypes.blogspot.com/feeds/posts/default#list\">list data type</a> and, a new one, the <tt><a href=\"http://logicaltypes.blogspot.com/feeds/posts/default#either\">Either</a></tt> monad. <br /><br />We saw the first one <a href=\"http://logicaltypes.blogspot.com/2008/05/no-fibbing-getting-into-monad-groove.html\">in the previous post</a>: the <tt><a name=\"maybe\">Maybe</a></tt> monad.  This monad type has two instances: <tt>Nothing</tt> and <tt>Just</tt> <code>x</code> (where <code>x</code> is the specific value of the computation).  The <tt>Maybe</tt> monad is illustrated by the two dialogues below:<br /><br /><table border=\"0\"><tr><td align=\"center\" colspan=\"2\"><em>Scenario 1</em></td></tr><br /><tr><td>Waiter:</td> <td><em>How is the pork chop, can I get you anything to go with that?</em></td></tr><br /><tr><td>Custamah:</td> <td><em>Oh, <tt>Nothing</tt> for me, thanks.</em></td></tr><br /><tr><td>Waiter:</td><td><em>Wonderful, enjoy your meal.</em></td></tr><br /><br /><tr><td colspan=\"2\">&nbsp;</td></tr><br /><tr><td colspan=\"2\" align=\"center\"><em>Scenario 2</em></td></tr><br /><tr><td colspan=\"2\">&nbsp;</td></tr><br /><br /><tr><td>Waiter:</td><td><em>How is the pork chop, can I get you anything to go with it?</em></td></tr><br /><tr><td>Custamah:</td><td><em>Oh, <tt>Just</tt> a small bowl of applesauce, please?</em></td></tr><br /><tr><td>Waiter:</td><td><em>Sure, I'll bring that right out.</em></td></tr><br /></table><br /><br />The waiter in the above two scenarios doesn't know exactly what the customer will want, but that waiter is pretty sure the customer will ask for <tt>Nothing</tt> or for <tt>Just</tt> something, and these options describe the <tt>Maybe</tt> monad type.<br /><br />Another example of this kind of monad is the list data type.  But whereas the <tt>Maybe</tt> monad allows two options (the answer or failure), the list data type (a monad) allows multiple answers (including no answers, which is represented by the empty list).  These kinds of monads form a protocol called the <tt>MonadPlus</tt> class,  just as the more general monad data types form the more general protocol of the <tt>Monad</tt> class, and just like regular monads, conform to a set of laws.<br /><br />First, let us specify and explain what the <tt>MonadPlus</tt> protocol is.  All <tt>MonadPlus</tt> types must have the following two properties defined:<br /><br /><blockquote><code>mzero :: m a</code> &mdash; the base, or usually interpreted as fail, value; and,<br /><code>mplus :: m a &rarr; m a &rarr; m a</code> &mdash; a function that chooses a success value when offered two values</blockquote><br /><br />For the <tt>Maybe MonadPlus</tt> type the above properties are defined as follows:<br /><br /><blockquote><pre>mzero = <tt>Nothing<br />Nothing</tt> `mplus` b = b<br />a       `mplus` b = a</pre></blockquote><br /><br />In other words, <tt>Nothing</tt> is the failure case, and <code>mplus</code> tries to choose a non-<tt>Nothing</tt> value (roughly: \"If <code>a</code> is <tt>Nothing</tt>, pick <code>b</code>; <kbd>otherwise</kbd> pick <code>a</code>.\"  Here's a question for you: what happens when both <code>a</code> <em>and</em> <code>b</code> are <tt>Nothing</tt>, and for what reason?)  Note the interesting semantics of <code>mplus</code> &mdash; it is not at all addition, as we expect, for:<br /><br /><blockquote><code><tt>Just</tt> 3 `mplus` <tt>Just</tt> 4 = <tt>Just</tt> 3</code></blockquote><br /><br /><a href=\"http://logicaltypes.blogspot.com/2008/05/trivial-monad-solutions.html\">Recall</a> that if we wish to do monadic addition, we need to define such an operator.  <br /><br /><blockquote><pre>madd :: (<tt>Monad</tt> m, <tt>Num</tt> a) &rArr; m a &rarr; m a &rarr; m a<br />madd = liftM2 (+)<br /><tt>Just</tt> 3 `madd` <tt>Just</tt> 4 = <tt>Just</tt> 7</pre></blockquote><br /><br />So, now <code>madd</code> has the triple meaning here: it <em>is not</em> <code>mplus</code> (which <em>is not</em> addition), it <em>is</em> addition for monads containing numbers, and it either heightens awareness or annoys the cause of \"<a href=\"http://www.madd.org/\">MADD</a>\".  Got all that?<br /><br />The <tt>Maybe</tt> type has a special handler, called <kbd>maybe</kbd>.  Its type signature is:<br /><br /><blockquote><code><kbd>maybe</kbd> :: b &rarr; (a &rarr; b) &rarr; <tt>Maybe</tt> a &rarr; b</code></blockquote><br /><br />What does this function do?  Well, we've already seen it in action with the monadic <a href=\"http://logicaltypes.blogspot.com/2008/05/oh-my-acking-monad.html\">Ackermann</a> and <a href=\"http://logicaltypes.blogspot.com/2008/05/no-fibbing-getting-into-monad-groove.html\">Fibonacci</a> solutions.  One can read the arguments from right to left, to get the feel of an if-then-else:  <u>if</u> the last argument is <tt>Just</tt> <code>a</code>, <u>then</u> pass <code>a</code> to the second argument (which is a function that converts an <code>a</code> to the proper return type); <u>else</u> execute the first argument.  A very compact and useful function when working with <tt>Maybe</tt> types.<br /><br />The second most commonly used data type used for non-deterministic computation is the <a name=\"list\">list</a> <tt>MonadPlus</tt> data type.  It has an interesting variation from the <tt>Maybe</tt> definition:<br /><br /><blockquote><pre>mzero = []<br />mplus = (++)</pre></blockquote><br /><br />In other words, the empty list (<code>[]</code>) is the base (failure) case, and <code>mplus</code> here actually is addition ('concatenation', to be technically correct); addition, that is, in the list-sense.  But it all works out, particularly when it comes to the base cases, for:<br /><br /><blockquote><pre>[3] `mplus` [] = [3]<br /><tt>Just</tt> 3 `mplus` <tt>Nothing</tt> = <tt>Just</tt> 3</pre></blockquote><br /><br />But, on the other hand, <code>mplus</code> <em>is</em> different when handling non-base cases for the <tt>Maybe</tt> and list monad types, for:<br /><br /><blockquote><pre>[3] `mplus` [4] = [3, 4]<br /><tt>Just</tt> 3 `mplus` <tt>Just</tt> 4 = <tt>Just</tt> 3</pre></blockquote><br /><br />But this difference is consistent with the different types: the list monad allows for multiple solutions, whereas the <tt>Maybe</tt> monad allows only one.<br /><br />The list data type has too many special functions associated with it to review in this post.  I recommend a review of the <a href=\"http://haskell.org/onlinereport/standard-prelude.html#preludelist\">Haskell online report</a> to get a taste of list's rich functionality, and then read <a href=\"http://www.randomhacks.net/articles/2007/03/12/monads-in-15-minutes\">Eric Kidd's post on backtracking with monads</a> for some insights into using list monads in nondeterministic programming.<br /><br />The third data type that is used, albeit less frequently, for non-deterministic computation is the <tt><a name=\"either\">Either</a></tt> data type.  It's structure is as follows:<br /><br /><blockquote><code><kbd>data <tt>Either</tt> a b = <tt>Left</tt> a | <tt>Right</tt> b</kbd></code></blockquote><br /><br />The way <tt>Either</tt> operates is that it offers a mutually-exclusive choice.  For example, little Isabel sits to my <tt>Left</tt> and her at&eacute; Elena Marie sits to my <tt>Right</tt>, so at 4 p.m. I must choose <tt>Either</tt> one to serve tea first: <tt>Left Isabel</tt> or <tt>Right ElenaMarie</tt>.<br /><br />The interesting distinction of the <tt>Either</tt> monad to <tt>MonadPlus</tt> types such as the list data type and the <tt>Maybe</tt> monad is that both options are weighed equally, or, more to the point, neither is considered to be the base case.  This means that <tt>Either</tt>, <em>qua</em> <tt>Either</tt>, is not in the <tt>MonadPlus</tt> class.  With this <em>caveat</em>, can the <tt>Either</tt> type be used for non-deterministic computation? <a href=\"http://storytotell.org/articles/2007/04/08/haskell-arrows\">Yes, absolutely!</a><br /><br />Not only can the <tt>Either</tt> type be used in its basic monadic form, but it also can be coerced into the <tt>MonadPlus</tt> class.  How? It's simple, really.  By simply choosing one of the branches to be the base (the Haskell library designers chose <tt>Left</tt>), the <tt>Either</tt> type now conforms to that protocol.  The convention assigns the error message (a <tt>String</tt>) to the <tt>Left</tt> and the value sought is assigned to the <tt>Right</tt> one.  This rather reduces <tt>Either</tt> to a glorified, error-handling, <tt>Maybe</tt>, and that is how it is used in every-day Haskell code for the most part.<br /><br />The <tt>Either</tt> monad also has a special handler, <kbd>either</kbd>, with the type signature of:<br /><br /><blockquote><code><kbd>either</kbd> :: (a &rarr; c) &rarr; (b &rarr; c) &rarr; <tt>Either</tt> a b &rarr; c</code></blockquote><br /><br />This function is in the same vein as the <tt>Maybe</tt> handler, but complicated by the fact that <kbd>maybe</kbd> has only one (success) type to handle, whereas this function has two possible types it deals with &mdash; <kbd>either</kbd>'s type translates as: if the answer from the third argument (<tt>Either</tt> <code>a b</code>) is <tt>Left</tt> <code>a</code>, then feed <code>a</code> to the first argument (a function that converts the input value of type <code>a</code> to the output of type <code>c</code>), but if the answer from the third argument is of type <code><tt>Right</tt> b</code>, then feed <code>b</code> to the second argument (a function that converts the input value of type <code>b</code> to the output of type <code>c</code>).<br /><br />What we've seen in this entry is an introduction to the <tt>MonadPlus</tt> class and three examples of monads that allow for choice, <tt>Maybe</tt>, the list data type and <tt>Either</tt>, and saw an example for each which demonstrated their ability to code with choice.<br /><br />The <a href=\"http://logicaltypes.blogspot.com/2008/05/guarded-choice-with-monadplus.html\">next entry</a> will further explore the <code><font color=\"blue\">MonadPlus</font></code> class and some of its powerful functions, such as <code>msum</code> and <kbd>guard</kbd>, and how the <tt>MonadPlus</tt> class allows us to code in a declarative nondeterministic style.", homepage = "http://logicaltypes.blogspot.com/2008/05/choice-with-monads-list-maybe-either.html", isRead = True}]}]